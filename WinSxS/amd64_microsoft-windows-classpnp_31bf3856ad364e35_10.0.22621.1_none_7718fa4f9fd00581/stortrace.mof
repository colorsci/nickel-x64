#pragma classflags("forceupdate")
#pragma namespace("\\\\.\\root\\WMI")
//
// WPP Generated File
// PDB:  d:\0060.obj.x86fre\drivers\storage\classpnp\objfre\i386\classpnp.pdb
// PDB:  Last Updated :2006-3-8:6:15:15:266 (UTC) [binplace]
//

//ModuleName = wppCtlGuid        (Init called in Function ClassInitialize)
[Dynamic,
 Description("Classpnp Driver Tracing Provider"),
 guid("{FA8DE7C4-ACDE-4443-9994-C4E2359A9EDB}"),
 locale("MS\\0x409")]
class ClasspnpGuid : EventTrace
{
    [Description ("Enable Flags"),
        ValueDescriptions{
             "This enables all configuration traces",
             "This enables PNP traces",
             "This enables power traces",
             "This enables read/write traces",
             "This enables IOCTL traces",
             "This enables I/O queue traces",
             "This enables WMI traces",
             "This enables timer traces",
             "This enables initilization traces",
             "This enables remove lock traces",
             "This flag is not used",
             "This flag is not used",
             "This enables media change notification traces",
             "This enables ISR traces",
             "This enables device enumeration traces"},
        DefineValues{
             "TRACE_FLAG_GENERAL",
             "TRACE_FLAG_PNP",
             "TRACE_FLAG_POWER",
             "TRACE_FLAG_RW",
             "TRACE_FLAG_IOCTL",
             "TRACE_FLAG_QUEUE",
             "TRACE_FLAG_WMI",
             "TRACE_FLAG_TIMER",
             "TRACE_FLAG_INIT",
             "TRACE_FLAG_LOCK",
             "TRACE_FLAG_DEBUG1",
             "TRACE_FLAG_DEBUG2",
             "TRACE_FLAG_MCN",
             "TRACE_FLAG_ISR",
             "TRACE_FLAG_ENUM"},
        Values{
             "TRACE_FLAG_GENERAL",
             "TRACE_FLAG_PNP",
             "TRACE_FLAG_POWER",
             "TRACE_FLAG_RW",
             "TRACE_FLAG_IOCTL",
             "TRACE_FLAG_QUEUE",
             "TRACE_FLAG_WMI",
             "TRACE_FLAG_TIMER",
             "TRACE_FLAG_INIT",
             "TRACE_FLAG_LOCK",
             "TRACE_FLAG_DEBUG1",
             "TRACE_FLAG_DEBUG2",
             "TRACE_FLAG_MCN",
             "TRACE_FLAG_ISR",
             "TRACE_FLAG_ENUM"},
        ValueMap{
             "0x00000001",
             "0x00000002",
             "0x00000004",
             "0x00000008",
             "0x00000010",
             "0x00000020",
             "0x00000040",
             "0x00000080",
             "0x00000100",
             "0x00000200",
             "0x00000400",
             "0x00000800",
             "0x00001000",
             "0x00002000",
             "0x00004000"}
    ]
    uint32 Flags;
    [Description ("Levels"),
        ValueDescriptions{
            "Abnormal exit or termination",
            "Severe errors that need logging",
            "Warnings such as allocation failure",
            "Includes non-error cases",
            "Detailed traces from intermediate steps" },
         DefineValues{
            "TRACE_LEVEL_FATAL",
            "TRACE_LEVEL_ERROR",
            "TRACE_LEVEL_WARNING"
            "TRACE_LEVEL_INFORMATION",
            "TRACE_LEVEL_VERBOSE" },
        Values{
            "Fatal",
            "Error",
            "Warning",
            "Information",
            "Verbose" },
        ValueMap{
            "0x1",
            "0x2",
            "0x3",
            "0x4",
            "0x5" },
        ValueType("index")
    ]
    uint32 Level;
};

#pragma classflags("forceupdate")
#pragma namespace("\\\\.\\root\\WMI")
//
// WPP Generated File
// PDB:  d:\0060.obj.x86fre\drivers\storage\disk\objfre\i386\disk.pdb
// PDB:  Last Updated :2006-3-8:6:15:31:563 (UTC) [binplace]
//

//ModuleName = wppCtlGuid	 (Init called in Function DriverEntry)
[Dynamic,
 Description("Disk Class Driver Tracing Provider"),
 guid("{945186BF-3DD6-4f3f-9C8E-9EDD3FC9D558}"),
 locale("MS\\0x409")]
class DiskGuid : EventTrace
{
    [Description ("Enable Flags"),
        ValueDescriptions{
             "This enables all configuration traces",
             "This enables PNP traces",
             "This enables power traces",
             "This enables read/write traces",
             "This enables IOCTL traces",
             "This enables I/O queue traces",
             "This enables WMI traces",
             "This enables timer traces",
             "This enables initilization traces",
             "This enables remove lock traces",
             "This flag is not used",
             "This flag is not used",
             "This enables media change notification traces",
             "This enables ISR traces",
             "This enables device enumeration traces"},
        DefineValues{
             "TRACE_FLAG_GENERAL",
             "TRACE_FLAG_PNP",
             "TRACE_FLAG_POWER",
             "TRACE_FLAG_RW",
             "TRACE_FLAG_IOCTL",
             "TRACE_FLAG_QUEUE",
             "TRACE_FLAG_WMI",
             "TRACE_FLAG_TIMER",
             "TRACE_FLAG_INIT",
             "TRACE_FLAG_LOCK",
             "TRACE_FLAG_DEBUG1",
             "TRACE_FLAG_DEBUG2",
             "TRACE_FLAG_MCN",
             "TRACE_FLAG_ISR",
             "TRACE_FLAG_ENUM"},
        Values{
             "TRACE_FLAG_GENERAL",
             "TRACE_FLAG_PNP",
             "TRACE_FLAG_POWER",
             "TRACE_FLAG_RW",
             "TRACE_FLAG_IOCTL",
             "TRACE_FLAG_QUEUE",
             "TRACE_FLAG_WMI",
             "TRACE_FLAG_TIMER",
             "TRACE_FLAG_INIT",
             "TRACE_FLAG_LOCK",
             "TRACE_FLAG_DEBUG1",
             "TRACE_FLAG_DEBUG2",
             "TRACE_FLAG_MCN",
             "TRACE_FLAG_ISR",
             "TRACE_FLAG_ENUM"},
        ValueMap{
             "0x00000001",
             "0x00000002",
             "0x00000004",
             "0x00000008",
             "0x00000010",
             "0x00000020",
             "0x00000040",
             "0x00000080",
             "0x00000100",
             "0x00000200",
             "0x00000400",
             "0x00000800",
             "0x00001000",
             "0x00002000",
             "0x00004000"}
    ]
    uint32 Flags;
    [Description ("Levels"),
        ValueDescriptions{
            "Abnormal exit or termination",
            "Severe errors that need logging",
            "Warnings such as allocation failure",
            "Includes non-error cases",
            "Detailed traces from intermediate steps" },
         DefineValues{
            "TRACE_LEVEL_FATAL",
            "TRACE_LEVEL_ERROR",
            "TRACE_LEVEL_WARNING"
            "TRACE_LEVEL_INFORMATION",
            "TRACE_LEVEL_VERBOSE" },
        Values{
            "Fatal",
            "Error",
            "Warning",
            "Information",
            "Verbose" },
        ValueMap{
            "0x1",
            "0x2",
            "0x3",
            "0x4",
            "0x5" },
        ValueType("index")
    ]
    uint32 Level;
};

#pragma classflags("forceupdate")
#pragma namespace("\\\\.\\root\\WMI")
//
// WPP Generated File
// PDB:  d:\0060.obj.x86fre\drivers\storage\port\ide\port\ataport\objfre\i386\ataport.pdb
// PDB:  Last Updated :2006-3-8:6:15:22:157 (UTC) [binplace]
//

//ModuleName = wppCtlGuid	 (Init called in Function IdeTraceStart)
[Dynamic,
 Description("ATA Port Driver Tracing Provider"),
 guid("{d08bd885-501e-489a-bac6-b7d24bfe6bbf}"),
 locale("MS\\0x409")]
class AtaportGuid : EventTrace
{
    [Description ("Enable Flags"),
        ValueDescriptions{
             "This enables all configuration traces",
             "This enables PNP traces",
             "This enables power traces",
             "This enables read/write traces",
             "This enables IOCTL traces",
             "This enables I/O queue traces",
             "This enables WMI traces",
             "This enables timer traces",
             "This enables initilization traces",
             "This enables remove lock traces",
             "This flag is not used",
             "This flag is not used",
             "This enables media change notification traces",
             "This enables ISR traces",
             "This enables device enumeration traces"},
        DefineValues{
             "TRACE_FLAG_GENERAL",
             "TRACE_FLAG_PNP",
             "TRACE_FLAG_POWER",
             "TRACE_FLAG_RW",
             "TRACE_FLAG_IOCTL",
             "TRACE_FLAG_QUEUE",
             "TRACE_FLAG_WMI",
             "TRACE_FLAG_TIMER",
             "TRACE_FLAG_INIT",
             "TRACE_FLAG_LOCK",
             "TRACE_FLAG_DEBUG1",
             "TRACE_FLAG_DEBUG2",
             "TRACE_FLAG_MCN",
             "TRACE_FLAG_ISR",
             "TRACE_FLAG_ENUM"},
        Values{
             "TRACE_FLAG_GENERAL",
             "TRACE_FLAG_PNP",
             "TRACE_FLAG_POWER",
             "TRACE_FLAG_RW",
             "TRACE_FLAG_IOCTL",
             "TRACE_FLAG_QUEUE",
             "TRACE_FLAG_WMI",
             "TRACE_FLAG_TIMER",
             "TRACE_FLAG_INIT",
             "TRACE_FLAG_LOCK",
             "TRACE_FLAG_DEBUG1",
             "TRACE_FLAG_DEBUG2",
             "TRACE_FLAG_MCN",
             "TRACE_FLAG_ISR",
             "TRACE_FLAG_ENUM"},
        ValueMap{
             "0x00000001",
             "0x00000002",
             "0x00000004",
             "0x00000008",
             "0x00000010",
             "0x00000020",
             "0x00000040",
             "0x00000080",
             "0x00000100",
             "0x00000200",
             "0x00000400",
             "0x00000800",
             "0x00001000",
             "0x00002000",
             "0x00004000"}
    ]
    uint32 Flags;
    [Description ("Levels"),
        ValueDescriptions{
            "Abnormal exit or termination",
            "Severe errors that need logging",
            "Warnings such as allocation failure",
            "Includes non-error cases",
            "Detailed traces from intermediate steps" },
         DefineValues{
            "TRACE_LEVEL_FATAL",
            "TRACE_LEVEL_ERROR",
            "TRACE_LEVEL_WARNING"
            "TRACE_LEVEL_INFORMATION",
            "TRACE_LEVEL_VERBOSE" },
        Values{
            "Fatal",
            "Error",
            "Warning",
            "Information",
            "Verbose" },
        ValueMap{
            "0x1",
            "0x2",
            "0x3",
            "0x4",
            "0x5" },
        ValueType("index")
    ]
    uint32 Level;
};

#pragma classflags("forceupdate")
#pragma namespace("\\\\.\\root\\WMI")
//
// WPP Generated File
// PDB:  d:\0060.obj.x86fre\drivers\wdm\usb\driver\usbmass\objfre\i386\usbstor.pdb
// PDB:  Last Updated :2006-3-8:6:20:15:842 (UTC) [binplace]
//

//ModuleName = wppCtlGuid	 (Init called in Function DriverEntry)
[Dynamic,
 Description("USB Storage Driver Tracing Provider"),
 guid("{72FB9358-A9B3-41E0-AE41-E8DECA41E3A8}"),
 locale("MS\\0x409")]
class UsbstorGuid : EventTrace
{
    [Description ("Enable Flags"),
        ValueDescriptions{
             "This enables all configuration traces",
             "This enables PNP traces",
             "This enables power traces",
             "This enables read/write traces",
             "This enables IOCTL traces",
             "This enables I/O queue traces",
             "This enables WMI traces",
             "This enables timer traces",
             "This enables initilization traces",
             "This enables remove lock traces",
             "This flag is not used",
             "This flag is not used",
             "This enables media change notification traces",
             "This enables ISR traces",
             "This enables device enumeration traces"},
        DefineValues{
             "TRACE_FLAG_GENERAL",
             "TRACE_FLAG_PNP",
             "TRACE_FLAG_POWER",
             "TRACE_FLAG_RW",
             "TRACE_FLAG_IOCTL",
             "TRACE_FLAG_QUEUE",
             "TRACE_FLAG_WMI",
             "TRACE_FLAG_TIMER",
             "TRACE_FLAG_INIT",
             "TRACE_FLAG_LOCK",
             "TRACE_FLAG_DEBUG1",
             "TRACE_FLAG_DEBUG2",
             "TRACE_FLAG_MCN",
             "TRACE_FLAG_ISR",
             "TRACE_FLAG_ENUM"},
        Values{
             "TRACE_FLAG_GENERAL",
             "TRACE_FLAG_PNP",
             "TRACE_FLAG_POWER",
             "TRACE_FLAG_RW",
             "TRACE_FLAG_IOCTL",
             "TRACE_FLAG_QUEUE",
             "TRACE_FLAG_WMI",
             "TRACE_FLAG_TIMER",
             "TRACE_FLAG_INIT",
             "TRACE_FLAG_LOCK",
             "TRACE_FLAG_DEBUG1",
             "TRACE_FLAG_DEBUG2",
             "TRACE_FLAG_MCN",
             "TRACE_FLAG_ISR",
             "TRACE_FLAG_ENUM"},
        ValueMap{
             "0x00000001",
             "0x00000002",
             "0x00000004",
             "0x00000008",
             "0x00000010",
             "0x00000020",
             "0x00000040",
             "0x00000080",
             "0x00000100",
             "0x00000200",
             "0x00000400",
             "0x00000800",
             "0x00001000",
             "0x00002000",
             "0x00004000"}
    ]
    uint32 Flags;
    [Description ("Levels"),
        ValueDescriptions{
            "Abnormal exit or termination",
            "Severe errors that need logging",
            "Warnings such as allocation failure",
            "Includes non-error cases",
            "Detailed traces from intermediate steps" },
         DefineValues{
            "TRACE_LEVEL_FATAL",
            "TRACE_LEVEL_ERROR",
            "TRACE_LEVEL_WARNING"
            "TRACE_LEVEL_INFORMATION",
            "TRACE_LEVEL_VERBOSE" },
        Values{
            "Fatal",
            "Error",
            "Warning",
            "Information",
            "Verbose" },
        ValueMap{
            "0x1",
            "0x2",
            "0x3",
            "0x4",
            "0x5" },
        ValueType("index")
    ]
    uint32 Level;
};

#pragma classflags("forceupdate")
#pragma namespace("\\\\.\\root\\WMI")
//
// WPP Generated File
// PDB:  d:\0060.obj.x86fre\drivers\storage\sbp2port\objfre\i386\sbp2port.pdb
// PDB:  Last Updated :2006-3-8:6:15:37:47 (UTC) [binplace]
//

//ModuleName = wppCtlGuid	 (Init called in Function DriverEntry)
[Dynamic,
 Description("SBP2 Port Driver Tracing Provider"),
 guid("{6710597F-7319-4AAE-9B85-C8D87136A56B}"),
 locale("MS\\0x409")]
class Sbp2portGuid : EventTrace
{
    [Description ("Enable Flags"),
        ValueDescriptions{
             "This enables all configuration traces",
             "This enables PNP traces",
             "This enables power traces",
             "This enables read/write traces",
             "This enables IOCTL traces",
             "This enables I/O queue traces",
             "This enables WMI traces",
             "This enables timer traces",
             "This enables initilization traces",
             "This enables remove lock traces",
             "This flag is not used",
             "This flag is not used",
             "This enables media change notification traces",
             "This enables ISR traces",
             "This enables device enumeration traces"},
        DefineValues{
             "TRACE_FLAG_GENERAL",
             "TRACE_FLAG_PNP",
             "TRACE_FLAG_POWER",
             "TRACE_FLAG_RW",
             "TRACE_FLAG_IOCTL",
             "TRACE_FLAG_QUEUE",
             "TRACE_FLAG_WMI",
             "TRACE_FLAG_TIMER",
             "TRACE_FLAG_INIT",
             "TRACE_FLAG_LOCK",
             "TRACE_FLAG_DEBUG1",
             "TRACE_FLAG_DEBUG2",
             "TRACE_FLAG_MCN",
             "TRACE_FLAG_ISR",
             "TRACE_FLAG_ENUM"},
        Values{
             "TRACE_FLAG_GENERAL",
             "TRACE_FLAG_PNP",
             "TRACE_FLAG_POWER",
             "TRACE_FLAG_RW",
             "TRACE_FLAG_IOCTL",
             "TRACE_FLAG_QUEUE",
             "TRACE_FLAG_WMI",
             "TRACE_FLAG_TIMER",
             "TRACE_FLAG_INIT",
             "TRACE_FLAG_LOCK",
             "TRACE_FLAG_DEBUG1",
             "TRACE_FLAG_DEBUG2",
             "TRACE_FLAG_MCN",
             "TRACE_FLAG_ISR",
             "TRACE_FLAG_ENUM"},
        ValueMap{
             "0x00000001",
             "0x00000002",
             "0x00000004",
             "0x00000008",
             "0x00000010",
             "0x00000020",
             "0x00000040",
             "0x00000080",
             "0x00000100",
             "0x00000200",
             "0x00000400",
             "0x00000800",
             "0x00001000",
             "0x00002000",
             "0x00004000"}
    ]
    uint32 Flags;
    [Description ("Levels"),
        ValueDescriptions{
            "Abnormal exit or termination",
            "Severe errors that need logging",
            "Warnings such as allocation failure",
            "Includes non-error cases",
            "Detailed traces from intermediate steps" },
         DefineValues{
            "TRACE_LEVEL_FATAL",
            "TRACE_LEVEL_ERROR",
            "TRACE_LEVEL_WARNING"
            "TRACE_LEVEL_INFORMATION",
            "TRACE_LEVEL_VERBOSE" },
        Values{
            "Fatal",
            "Error",
            "Warning",
            "Information",
            "Verbose" },
        ValueMap{
            "0x1",
            "0x2",
            "0x3",
            "0x4",
            "0x5" },
        ValueType("index")
    ]
    uint32 Level;
};


