<?xml version="1.0" encoding="utf-8" ?>
<Types>
  <Type>
    <Name>Microsoft.Management.Infrastructure.CimInstance#MSFT_IPAM_Range</Name>
    <Members>
      <ScriptProperty>
        <Name>AddressType</Name>
        <GetScriptBlock>
          [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.AddressFamily]($this.PSBase.CimInstanceProperties['AddressType'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param($newValue)
          $this.PSBase.CimInstanceProperties['AddressType'].Value = [System.String] [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.AddressFamily] $newValue
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>AddressCategory</Name>
        <GetScriptBlock>
          [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.AddressCategory]($this.PSBase.CimInstanceProperties['AddressCategory'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param($newValue)
          $this.PSBase.CimInstanceProperties['AddressCategory'].Value = [System.String] [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.AddressCategory] $newValue
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>StartAddress</Name>
        <GetScriptBlock>
          [OutputType([System.Net.IPAddress])]
          param()
          [System.Net.IPAddress]($this.PSBase.CimInstanceProperties['StartAddress'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param([System.Net.IPAddress]$value)
          $this.PSBase.CimInstanceProperties['StartAddress'].Value = [System.String]$value
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>EndAddress</Name>
        <GetScriptBlock>
          [OutputType([System.Net.IPAddress])]
          param()
          [System.Net.IPAddress]($this.PSBase.CimInstanceProperties['EndAddress'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param([System.Net.IPAddress]$value)
          $this.PSBase.CimInstanceProperties['EndAddress'].Value = [System.String]$value
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>AssignmentType</Name>
        <GetScriptBlock>
          [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.AddressAssignment]($this.PSBase.CimInstanceProperties['AssignmentType'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param($newValue)
          $this.PSBase.CimInstanceProperties['AssignmentType'].Value = [System.String] [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.AddressAssignment] $newValue
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>UtilizationCalculation</Name>
        <GetScriptBlock>
          [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.UtilizationCalculation]($this.PSBase.CimInstanceProperties['UtilizationCalculation'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param($newValue)
          $this.PSBase.CimInstanceProperties['UtilizationCalculation'].Value = [System.String] [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.UtilizationCalculation] $newValue
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>UtilizedAddresses</Name>
        <GetScriptBlock>
          [OutputType([System.Double])]
          param()
          [System.Double]($this.PSBase.CimInstanceProperties['UtilizedAddresses'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param([System.Double]$value)
          $this.PSBase.CimInstanceProperties['UtilizedAddresses'].Value = [System.String]$value
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>DnsServers</Name>
        <GetScriptBlock>
          [OutputType([System.Net.IPAddress[]])]
          param()
          [System.Net.IPAddress[]]($this.PSBase.CimInstanceProperties['DnsServers'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param([System.Net.IPAddress[]]$value)
          $this.PSBase.CimInstanceProperties['DnsServers'].Value = [System.String[]]$value
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>WinsServers</Name>
        <GetScriptBlock>
          [OutputType([System.Net.IPAddress[]])]
          param()
          [System.Net.IPAddress[]]($this.PSBase.CimInstanceProperties['WinsServers'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param([System.Net.IPAddress[]]$value)
          $this.PSBase.CimInstanceProperties['WinsServers'].Value = [System.String[]]$value
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>NetworkType</Name>
        <GetScriptBlock>
          [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.VirtualizationType]($this.PSBase.CimInstanceProperties['NetworkType'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param($newValue)
          $this.PSBase.CimInstanceProperties['NetworkType'].Value = [System.String] [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.VirtualizationType] $newValue
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>Utilization</Name>
        <GetScriptBlock>
          [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.Utilization]($this.PSBase.CimInstanceProperties['Utilization'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param($newValue)
          $this.PSBase.CimInstanceProperties['Utilization'].Value = [System.String] [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.Utilization] $newValue
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>SubnetMask</Name>
        <GetScriptBlock>
          [OutputType([System.Net.IPAddress])]
          param()
          [System.Net.IPAddress]($this.PSBase.CimInstanceProperties['SubnetMask'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param([System.Net.IPAddress]$value)
          $this.PSBase.CimInstanceProperties['SubnetMask'].Value = [System.String]$value
        </SetScriptBlock>
      </ScriptProperty>

      <ScriptProperty>
        <Name>StartIPAddress</Name>
        <GetScriptBlock>
          $this.PSBase.CimInstanceProperties['StartAddress'].Value
        </GetScriptBlock>
        <SetScriptBlock>
          param($Value)
          $this.PSBase.CimInstanceProperties['StartAddress'].Value = $Value
        </SetScriptBlock>
      </ScriptProperty>

      <ScriptProperty>
        <Name>EndIPAddress</Name>
        <GetScriptBlock>
          $this.PSBase.CimInstanceProperties['EndAddress'].Value
        </GetScriptBlock>
        <SetScriptBlock>
          param($Value)
          $this.PSBase.CimInstanceProperties['EndAddress'].Value = $Value
        </SetScriptBlock>
      </ScriptProperty>
      
      <ScriptProperty>
        <Name>CustomFields</Name>
        <GetScriptBlock>
          param()

          $output = @{};
          $isPrevCharSeperator = $false;
          $tempString = "";
          $nameValueFormat = $this.PSBase.CimInstanceProperties['CustomConfiguration'].Value;

          # Walk through the string, break the string at the Seperator character if it is not escaped.
          # And add to the string collection.
          for ( $i = 0; $i -lt $nameValueFormat.Length; $i++)
          {
            $currentChar = $nameValueFormat[$i];
            switch ($currentChar)
            {

              '\' {

                      if ($isPrevCharSeperator)
                      {
                          $tempString += $currentChar;
                          # As this character was not considered as a seperator.
                          $isPrevCharSeperator = $false;
                      }
                      else
                      {
                          $isPrevCharSeperator = $true;
                      }

                  }

              ';' {

                      # It is a escaped special character, we just treat it as a part of the name.
                      if ($isPrevCharSeperator)
                      {
                          $tempString += $currentChar;
                      }
                      else
                      {
                          # If this is not a escaped seperator, we take the word till this point
                          # as the end of a valid value.

                          $value = $tempString;
                          $output.Add($name, $value);
                          $tempString = "";

                      }
                      $isPrevCharSeperator = $false;
                  }

              '=' {

                      # It is a escaped special character, we just treat it as a part of the name.
                      if ($isPrevCharSeperator)
                      {
                          $tempString += $currentChar;
                      }
                      else
                      {

                          # This is the boundary of name=value.
                          # Get the name and store it in the first item of the current tuple.

                          $name = $tempString
                          $tempString = "";
                      }

                      $isPrevCharSeperator = $false;
                 }

              default {

                          # The previous character was Escape Character and when combined with the
                          # current character does not form a escape sequence, hence the previous
                          # escape character is traeted as part of the string.
                          if ($isPrevCharSeperator)
                          {
                              $tempString += '\';
                          }

                          # Any other character, just append it to the current word.
                          $tempString += $currentChar;
                          $isPrevCharSeperator = $false;
                      }
              }
          }
          $output;
        </GetScriptBlock>
      </ScriptProperty>
    </Members>
  </Type>
  
  <Type>
    <Name>Microsoft.Management.Infrastructure.CimInstance#MSFT_IPAM_FreeRange</Name>
    <Members>
      <ScriptProperty>
        <Name>StartIPAddress</Name>
        <GetScriptBlock>
          [OutputType([System.Net.IPAddress])]
          param()
          [System.Net.IPAddress]($this.PSBase.CimInstanceProperties['StartIPAddress'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param([System.Net.IPAddress]$value)
          $this.PSBase.CimInstanceProperties['StartIPAddress'].Value = [System.String]$value
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>EndIPAddress</Name>
        <GetScriptBlock>
          [OutputType([System.Net.IPAddress])]
          param()
          [System.Net.IPAddress]($this.PSBase.CimInstanceProperties['EndIPAddress'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param([System.Net.IPAddress]$value)
          $this.PSBase.CimInstanceProperties['EndIPAddress'].Value = [System.String]$value
        </SetScriptBlock>
      </ScriptProperty>      
      <ScriptProperty>
        <Name>NetworkId</Name>
        <GetScriptBlock>
          [OutputType([System.String])]
          param()
          [System.String]($this.PSBase.CimInstanceProperties['NetworkId'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param([System.String]$value)
          $this.PSBase.CimInstanceProperties['NetworkId'].Value = [System.String]$value
        </SetScriptBlock>
      </ScriptProperty>
    </Members>
  </Type>  
</Types>
