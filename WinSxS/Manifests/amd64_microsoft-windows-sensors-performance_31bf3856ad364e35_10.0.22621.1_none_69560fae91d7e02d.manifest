<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<assembly xmlns="urn:schemas-microsoft-com:asm.v3" manifestVersion="1.0" copyright="Copyright (c) Microsoft Corporation. All Rights Reserved.">
  <assemblyIdentity name="Microsoft-Windows-Sensors-Performance" version="10.0.22621.1" processorArchitecture="amd64" language="neutral" buildType="release" publicKeyToken="31bf3856ad364e35" versionScope="nonSxS" />
  <dependency discoverable="no" resourceType="Resources">
    <dependentAssembly>
      <assemblyIdentity name="Microsoft-Windows-Sensors-Performance.Resources" version="10.0.22621.1" processorArchitecture="amd64" language="*" buildType="release" publicKeyToken="31bf3856ad364e35" />
    </dependentAssembly>
  </dependency>
  <file name="SensorPerformanceEvents.dll" destinationPath="$(runtime.system32)\" sourceName="SensorPerformanceEvents.dll" importPath="$(build.nttree)\" sourcePath=".\">
    <securityDescriptor name="WRP_FILE_DEFAULT_SDDL" />
    <asmv2:hash xmlns:asmv2="urn:schemas-microsoft-com:asm.v2" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
      <dsig:Transforms>
        <dsig:Transform Algorithm="urn:schemas-microsoft-com:HashTransforms.Identity" />
      </dsig:Transforms>
      <dsig:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha256" />
      <dsig:DigestValue>3M2SArG/KNuazYisW4jSi/akYedGp41cJ4z6yO5UK8g=</dsig:DigestValue>
    </asmv2:hash>
  </file>
  <instrumentation>
    <events xmlns="http://schemas.microsoft.com/win/2004/08/events" xmlns:win="http://manifests.microsoft.com/win/2004/08/windows/events" xmlns:xs="http://www.w3.org/2001/XMLSchema">
      <provider guid="{D8900E18-36CB-4548-966F-13F068D1F78E}" message="$(string.SensPerfProvider)" messageFileName="%SystemRoot%\system32\SensorPerformanceEvents.dll" name="Microsoft-Windows-Sensors" resourceFileName="%SystemRoot%\system32\SensorPerformanceEvents.dll" symbol="SENSORS_PERFORMANCE_ETW_CONTROL_GUID">
        <channels>
          <channel chid="Performance" enabled="false" isolation="Application" message="$(string.SensPerfChannel)" name="Microsoft-Windows-Sensors/Performance" type="Analytic" />
          <channel chid="Debug" enabled="false" isolation="Application" message="$(string.SensDebugChannel)" name="Microsoft-Windows-Sensors/Debug" type="Debug" />
        </channels>
      </provider>
      <cmi />
    </events>
    <templates />
  </instrumentation>
  <localization>
    <resources culture="en-US">
      <stringTable>
        <string id="SensPerfProvider" value="Microsoft-Windows-Sensors" />
        <string id="SensPerfChannel" value="Performance" />
        <string id="SensDebugChannel" value="Debug" />
        <string id="PowerOn.Event" value="Device is being powered up" />
        <string id="PowerOff.Event" value="Device is being powered down" />
        <string id="SensorService.OnDataUpdated.Event" value="Sensor Service data updated event" />
        <string id="SensorService.OnStateChanged.Event" value="Sensor Service state changed event" />
        <string id="SensorService.OnDataUpdated.Start" value="Sensor Service received a data updated event" />
        <string id="SensorService.OnDataUpdated.Stop" value="Sensor Service set data and starting to process data" />
        <string id="SensorService.OnStateChanged.Start" value="Sensor Service received a state changed event" />
        <string id="SensorService.OnStateChanged.Stop" value="Sensor Service setting sensor state and starting to process data" />
        <string id="SensorService.WorkingSet" value="Sensor Service periodic report on memory usage" />
        <string id="SensorService.CPUUsage" value="Sensor Service periodic report on cpu usage" />
        <string id="SensorService.CollectData" value="Sensor Service results from querying a sensor" />
        <string id="SensorService.Orientation.TimerCallback.QuadrantAngle" value="Sensor Service timer queue callback for orientation, about to write quadrant angle to aggregated sensor" />
        <string id="SensorService.Orientation.ProcessData.State" value="Sensor Service processing sensor data for orientation, sensor state used in processing data" />
        <string id="SensorService.Orientation.ProcessData.DataRetrieved" value="Sensor Service processing sensor data for orientation, reading sensor data successful" />
        <string id="SensorService.Orientation.ProcessData.PitchAngleTest" value="Sensor Service processing sensor data for orientation, pitch angle test result" />
        <string id="SensorService.Orientation.ProcessData.ThetaCalculation" value="Sensor Service processing sensor data for orientation, screen orientation result" />
        <string id="SensorService.Orientation.ProcessData.ThetaNormalization" value="Sensor Service processing sensor data for orientation, theta negative so added 360" />
        <string id="SensorService.Orientation.ProcessData.QuadrantChangeTest" value="Sensor Service processing sensor data for orientation, testing if there was a quadrant change" />
        <string id="SensorService.Orientation.ProcessData.TimerQueueStatus" value="Sensor Service processing sensor data for orientation, status and action taken on timer queue" />
        <string id="SensorService.Orientation.TimerCallback.QuadrantChangeTest" value="Sensor Service timer queue callback for orientation, testing if there was a quadrant change" />
        <string id="SensorService.Orientation.TimerCallback.AngularThresholdTest" value="Sensor Service timer queue callback for orientation, testing if the screen rotated past angular threshold into next quadrant" />
        <string id="SensorService.SetQuadrantAngleInAggregatedSensor" value="Sensor Service setting quadrant angle in aggregated sensor" />
        <string id="SensorService.SetStateInAggregatedSensor" value="Sensor Service setting sensor state in aggregated sensor" />
        <string id="SensorClassExtension.Initialize" value="Sensor Class Extension Initialization" />
        <string id="SensorClassExtension.Uninitialize" value="Sensor Class Extension Uninitialization" />
        <string id="SensorClassExtension.ProcessIoControl" value="Sensor Class Extension ProcessIoControl Handler" />
        <string id="SensorClassExtension.PostEvent" value="Sensor Class Extension PostEvent Handler" />
        <string id="SensorClassExtension.ClientInformation" value="Sensor Class Extension Client Information event" />
        <string id="SensorAPI.Fire_OnDataUpdated" value="Sensor API call to fire ISensorEvents::OnDataUpdated event" />
        <string id="SensorAPI.GetData" value="Sensor API call to get sensor data report" />
        <string id="SensorAPI.GetProperty" value="Sensor API call to get a sensor property value" />
        <string id="SensorAPI.GetProperties" value="Sensor API call to get sensor property values" />
        <string id="SensorAPI.SetProperties" value="Sensor API call to set sensor property values" />
        <string id="SensorAPI.Fire_OnStateChanged" value="Sensor API call to fire ISensorEvents::OnStateChanged event" />
        <string id="SensorsHIDClassDriver.ReportDescriptorValidation_Failure" value="Validation failure in HID sensor report descriptor" />
        <string id="SensorsHIDClassDriver.ConnectionTypeMissing" value="Connection type missing in HID sensor feature report" />
        <string id="SensorsHIDClassDriver.ReportingStateMissing" value="Reporting state missing in HID sensor feature report" />
        <string id="SensorsHIDClassDriver.ReportIntervalMissing" value="Report interval missing in HID sensor feature report" />
        <string id="SensorsHIDClassDriver.ChangeSensitivityMissing" value="Change sensitivity missing in HID sensor feature report" />
        <string id="SensorsHIDClassDriver.DeprecatedFeatureReportField" value="Deprecated field used in HID sensor feature report" />
        <string id="SensorsHIDClassDriver.RedundantFeatureReportField" value="Redundant field used in HID sensor feature report" />
        <string id="SensorsHIDClassDriver.DeprecatedInputReportField" value="Deprecated field used in HID sensor input report" />
        <string id="SensorsHIDClassDriver.RedundantInputReportField" value="Redundant field used in HID sensor input report" />
        <string id="SensorsHIDClassDriver.FeatureReport_Failure" value="HID sensor feature report failure" />
        <string id="SensorsHIDClassDriver.SetFeatureReportFailure" value="Failed to set HID sensor feature report" />
        <string id="SensorsHIDClassDriver.InputReport_Failure" value="HID sensor input report failure" />
        <string id="SensorsHIDClassDriver.GetSynchronousInputReportFailure" value="Failed to get synchronous HID sensor input report" />
        <string id="SensorsHIDClassDriver.ProcessSynchronousInputReportFailure" value="Failed to process synchronous HID sensor input report" />
        <string id="SensorPlatform.GenericMessage" value="Informational Perf Marker for use in outputting a generic message" />
        <string id="SensorPlatform.DataEvent" value="Sensor Platform Data Event" />
        <string id="LocationProvider.ConsentPrompt" value="Perf Markers for time between starting Location API and consent prompt appears" />
        <string id="AutoRotation" value="PerfTrack measurement of auto-rotation" />
      </stringTable>
    </resources>
  </localization>
  <trustInfo>
    <security>
      <accessControl>
        <securityDescriptorDefinitions>
          <securityDescriptorDefinition name="WRP_FILE_DEFAULT_SDDL" sddl="O:S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464G:S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464D:P(A;;FA;;;S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)(A;;GRGX;;;BA)(A;;GRGX;;;SY)(A;;GRGX;;;BU)(A;;GRGX;;;S-1-15-2-1)(A;;GRGX;;;S-1-15-2-2)S:(AU;FASA;0x000D0116;;;WD)" operationHint="replace" description="Default SDDL for Windows Resource Protected file" />
        </securityDescriptorDefinitions>
      </accessControl>
    </security>
  </trustInfo>
</assembly>