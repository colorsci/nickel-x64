<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<assembly xmlns="urn:schemas-microsoft-com:asm.v3" manifestVersion="1.0" copyright="Copyright (c) Microsoft Corporation. All Rights Reserved.">
  <assemblyIdentity name="Microsoft-Windows-MinstoreEvents" version="10.0.22621.1" processorArchitecture="x86" language="neutral" buildType="release" publicKeyToken="31bf3856ad364e35" versionScope="nonSxS" />
  <dependency discoverable="no" resourceType="Resources">
    <dependentAssembly>
      <assemblyIdentity name="Microsoft-Windows-MinstoreEvents.Resources" version="10.0.22621.1" processorArchitecture="x86" language="*" buildType="release" publicKeyToken="31bf3856ad364e35" />
    </dependentAssembly>
  </dependency>
  <file name="MinstoreEvents.dll" destinationPath="$(runtime.system32)\" sourceName="MinstoreEvents.dll" importPath="$(build.nttree)\" sourcePath=".\">
    <securityDescriptor name="WRP_FILE_DEFAULT_SDDL" />
    <asmv2:hash xmlns:asmv2="urn:schemas-microsoft-com:asm.v2" xmlns:dsig="http://www.w3.org/2000/09/xmldsig#">
      <dsig:Transforms>
        <dsig:Transform Algorithm="urn:schemas-microsoft-com:HashTransforms.Identity" />
      </dsig:Transforms>
      <dsig:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha256" />
      <dsig:DigestValue>OXMWGYt1RR9i2DKA8+BtSwibd91kDv3KeayftyLZjiI=</dsig:DigestValue>
    </asmv2:hash>
  </file>
  <trustInfo>
    <security>
      <accessControl>
        <securityDescriptorDefinitions>
          <securityDescriptorDefinition name="WRP_FILE_DEFAULT_SDDL" sddl="O:S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464G:S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464D:P(A;;FA;;;S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)(A;;GRGX;;;BA)(A;;GRGX;;;SY)(A;;GRGX;;;BU)(A;;GRGX;;;S-1-15-2-1)(A;;GRGX;;;S-1-15-2-2)S:(AU;FASA;0x000D0116;;;WD)" operationHint="replace" />
        </securityDescriptorDefinitions>
      </accessControl>
    </security>
  </trustInfo>
  <instrumentation xmlns:win="http://manifests.microsoft.com/win/2004/08/windows/events" xmlns:wl="http://manifests.microsoft.com/win/2004/08/windows/wl">
    <events xmlns="http://schemas.microsoft.com/win/2004/08/events">
      <provider guid="{55B24B1D-DD9C-44C0-BA77-4F749F1B6976}" message="$(string.eventProviderName)" messageFileName="%SystemRoot%\System32\minstoreevents.dll" name="Microsoft-Windows-Minstore" resourceFileName="%SystemRoot%\System32\minstoreevents.dll" symbol="MinstoreEventProvider">
        <channels>
          <channel chid="defch" message="$(string.anChanName)" name="Microsoft-Windows-Minstore/Analytic" type="Analytic" />
          <channel chid="debugch" message="$(string.debugChanName)" name="Microsoft-Windows-Minstore/Debug" type="Debug" />
        </channels>
      </provider>
      <cmi />
    </events>
  </instrumentation>
  <localization>
    <resources culture="en-US">
      <stringTable>
        <string id="eventProviderName" value="Minstore Event Provider" />
        <string id="anChanName" value="Minstore Analytic Channel" />
        <string id="debugChanName" value="Minstore Debug Channel" />
        <string id="OpCode.BucketSplit" value="Bucket Split" />
        <string id="OpCode.BucketMerge" value="Bucket Merge" />
        <string id="OpCode.TreeUpdate" value="Write B+ tree" />
        <string id="OpCode.TreeUpdateStart" value="Started writing B+ tree" />
        <string id="OpCode.TreeUpdateEnd" value="Finished writing B+ tree" />
        <string id="OpCode.VolumeCheckpoint" value="Checkpoint" />
        <string id="OpCode.LogFullRedoLog" value="LFF: Redo Log" />
        <string id="OpCode.LogFullFreeSpace" value="LFF: Protected Space" />
        <string id="OpCode.LogAdvance" value="Log tail advance" />
        <string id="OpCode.LogPulseLazyWriter" value="Log pulse lazy writer" />
        <string id="OpCode.AllocationRange" value="Allocation range" />
        <string id="OpCode.ContainerMove" value="Container move" />
        <string id="OpCode.LogSkipReplay" value="Log skip replay" />
        <string id="OpCode.LogReplayFailure" value="Log replay failure" />
        <string id="OpCode.BucketReadCollision" value="Bucket read collision" />
        <string id="OpCode.BucketLockCollision" value="Bucket lock collision" />
        <string id="OpCode.BucketCowCollision" value="Bucket cow collision" />
        <string id="OpCode.CorruptBucket" value="B+ node CRC mismatch" />
        <string id="OpCode.FixedBucket" value="B+ node repaired via redundant copy" />
        <string id="OpCode.LogRedo" value="Log Redo" />
        <string id="OpCode.LazyWriter" value="Lazy Writer" />
        <string id="Event.BucketSplit" value="Bucket split" />
        <string id="Event.BucketMerge" value="Bucket merge" />
        <string id="Event.TreeUpdate" value="Tree update" />
        <string id="Event.TreeUpdateStart" value="Start tree update" />
        <string id="Event.TreeUpdateEnd" value="End tree update" />
        <string id="Event.VolumeCheckpoint" value="Tree update" />
        <string id="Event.LogFullRedoLog" value="LFF: Redo log" />
        <string id="Event.LogFullFreeSpace" value="LFF: Protected space" />
        <string id="Event.LogAdvance" value="Log tail advance from %3 to %4.%nLog is %2 percent full." />
        <string id="Event.LogPulseLazyWriter" value="Log pulse lazy writer. Log is %2 percent full." />
        <string id="Event.AllocationRange" value="Allocation range:%n%tMetadata allocation: %1 %n%tRequested tier: %2, actual tier: %3 %n%tRequested allocation start: %4, count: %5 %n%tActual allocation start: %6, count: %7" />
        <string id="Event.ContainerMove" value="Container move:%n%tSource tier: %1, Target tier: %2 %n%tSource start of range: %3, count: %4 %n%t Target physical offset: %5 %n%tSSD Fill Ratio %6, HDD Fill Ratio %7 %n%tReserved: %8%n%tDestaged allocation count: %9%n%tFailed SSD Destage: %10" />
        <string id="Event.LogSkipReplay" value="Minstore Redo Log application has been skipped. Minstore will now mount the volume without applying the redo log." />
        <string id="Event.LogReplayFailure" value="An error %0 was encountered while replaying the redo log. Minstore will now mount the volume without applying the redo log." />
        <string id="Event.BucketReadCollision" value="Two threads tried to read bucket %1 (table %2) for level %0 simultaneously." />
        <string id="Event.BucketLockCollision" value="A thread had to wait to lock bucket %1 (table %2) for level %0." />
        <string id="Event.BucketCowCollision" value="A thread had to wait for a copy of bucket %1 (table %2) for level %0 to finish." />
        <string id="Event.CorruptBucket" value="B+ node CRC mismatch" />
        <string id="Event.FixedBucket" value="B+ node repaired via redundant copy" />
        <string id="Event.PushRootStart" value="B+ tree starting pushing its root" />
        <string id="Event.PushRootEnd" value="B+ tree finished pushing its root" />
        <string id="Event.PopRootStart" value="B+ tree starting popping its root" />
        <string id="Event.PopRootEnd" value="B+ tree finished popping its root" />
        <string id="Event.BucketSplitStart" value="B+ tree node started splitting" />
        <string id="Event.BucketSplitEnd" value="B+ tree node finished splitting" />
        <string id="Event.BucketMergeStart" value="B+ tree nodes started merging" />
        <string id="Event.BucketMergeEnd" value="B+ tree nodes finished merging" />
        <string id="Event.AnalyzePassStart" value="Analyze pass start" />
        <string id="Event.AnalyzePassEnd" value="Analyze pass end" />
        <string id="Event.RedoPassStart" value="Redo pass start" />
        <string id="Event.RedoPassEnd" value="Redo pass end" />
        <string id="Event.RedoPassFlushAndCheckpointStart" value="Flush And Checkpoint start" />
        <string id="Event.RedoPassFlushAndCheckpointEnd" value="Flush And Checkpoint end" />
        <string id="Event.FirstTransactionFound" value="First redo transaction found" />
        <string id="Event.TreeUpdateRecordFound" value="Tree Update Record found" />
        <string id="Event.RedoOpenTable" value="Open Table for redo" />
        <string id="Event.RedoReservedRanges" value="Reserve ranges for redo" />
        <string id="Event.LazyWriterAddEntry" value="Binding %1.%2 was added to lazy writer list" />
        <string id="Event.LazyWriterRemoveEntry" value="Binding %1.%2 was removed from lazy writer list" />
        <string id="Event.LazyWriterQueueEntry" value="Binding %1.%2 was queued by rule %3" />
        <string id="Event.LazyWriterWriteEntry" value="Binding %1.%2 write starts" />
      </stringTable>
    </resources>
  </localization>
</assembly>