<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<assembly xmlns="urn:schemas-microsoft-com:asm.v3" manifestVersion="1.0" copyright="Copyright (c) Microsoft Corporation. All Rights Reserved.">
  <assemblyIdentity name="Microsoft-Windows-Sensors-Core-Performance" version="10.0.22621.1" processorArchitecture="amd64" language="neutral" buildType="release" publicKeyToken="31bf3856ad364e35" versionScope="nonSxS" />
  <instrumentation xmlns:win="http://manifests.microsoft.com/win/2004/08/windows/events" xmlns:xs="http://www.w3.org/2001/XMLSchema">
    <events xmlns="http://schemas.microsoft.com/win/2004/08/events">
      <provider guid="{9E051EAA-7FEE-4F9F-8897-D86F3692E8AF}" messageFileName="%SystemRoot%\system32\SensorsUtilsV2.dll" name="Microsoft-Windows-Sensors-Core-Performance" resourceFileName="%SystemRoot%\system32\SensorsUtilsV2.dll" symbol="SENSORS_PERF_PROVIDER" />
      <provider guid="{751c292b-23e6-58cf-1fd4-38f8512c66c2}" messageFileName="%SystemRoot%\system32\SensorsUtilsV2.dll" name="Microsoft-Windows-Sensors-Core" resourceFileName="%SystemRoot%\system32\SensorsUtilsV2.dll" symbol="SENSORS_CORE_PROVIDER" />
      <cmi />
    </events>
  </instrumentation>
  <localization>
    <resources culture="en-US">
      <stringTable>
        <string id="SensorsCx.Ioctl.Start" value="Start" />
        <string id="SensorsCx.Ioctl.Stop" value="Stop" />
        <string id="SensorsCx.Ioctl.GetSupportedDatafields" value="GetSupportedDatafields" />
        <string id="SensorsCx.Ioctl.GetProperties" value="GetProperties" />
        <string id="SensorsCx.Ioctl.GetDatafieldProperties" value="GetDatafieldProperties" />
        <string id="SensorsCx.Ioctl.GetDataInterval" value="GetDataInterval" />
        <string id="SensorsCx.Ioctl.SetDataInterval" value="SetDataInterval" />
        <string id="SensorsCx.Ioctl.GetDataThresholds" value="GetDataThresholds" />
        <string id="SensorsCx.Ioctl.SetDataThresholds" value="SetDataThresholds" />
        <string id="SensorsCx.Ioctl.UpdateDeclination" value="UpdateDeclination" />
        <string id="SensorsCx.Ioctl.StartHistory" value="StartHistory" />
        <string id="SensorsCx.Ioctl.StopHistory" value="StopHistory" />
        <string id="SensorsCx.Ioctl.ClearHistory" value="ClearHistory" />
        <string id="SensorsCx.Ioctl.GetHistory" value="GetHistory" />
        <string id="SensorsCx.Ioctl.SetReportLatency" value="SetReportLatency" />
        <string id="SensorsCx.Ioctl.GetDataDeliveryMode" value="GetDataDeliveryMode" />
        <string id="SensorsCx.Ioctl.GetReportLatency" value="GetReportLatency" />
        <string id="SensorsCx.Ioctl.GetBatchedSamples" value="GetBatchedSamples" />
        <string id="SensorsCx.Ioctl.GetDefaultDataThresholds" value="GetDefaultDataThresholds" />
        <string id="Event.SensorsCxFSContext" value="[SensorsCx] Sensor Class extension failed to initalize file context policy for DeviceInit (%1). 'UmdfFsContextUsePolicy' is not set to 'CannotUseFsContexts'" />
        <string id="Event.SensorsCxMissingDDI" value="[SensorsCx] Device (%1) does not implement all required sensor DDI callbacks" />
        <string id="Event.SensorsCxStateChangeSupport" value="[SensorsCx] Device (%1) Supports state change notification=(%2)" />
        <string id="Event.SensorsCxPowerPolicyOwner" value="[SensorsCx] Device (%1) is power policy owner=(%2)" />
        <string id="Event.SensorsCxSupportedSensorType" value="[SensorsCx] Sensor (%2) exposed by Device (%1) supports SensorType=(%3) with PersistentUniqueID=(%4)" />
        <string id="Event.SensorsCxSupportedCustomSensor" value="[SensorsCx] Custom Sensor (%2) exposed by Device (%1) with SubType=(%2) and PersistentUniqueID=(%3)" />
        <string id="Event.SensorsCxMissingSubType" value="[SensorsCx] Sensor (%2) with PersistentUniqueID=(%3) exposed by Device=(%1) missing vendor defined sub type" />
        <string id="Event.SensorsCxPublishedInterface" value="[SensorsCx] Published device interface of Class=(%3) with ReferenceString=(%4) for Sensor (%2) exposed by Device (%1)" />
        <string id="Event.SensorsCxMissingSensorCategory" value="[SensorsCx] Sensor Category missing in Sensor (%1)" />
        <string id="Event.SensorsCxEnumerationProperty" value="[SensorsCx] Found Enumeration Property({%3}-%4) in Sensor (%2) exposed by Device (%1)" />
        <string id="Event.SensorsCxIncorrectDefaultReportInterval" value="[SensorsCx] Default Report Interval (%3) in Sensor (%2) exposed by Device (%1) is &lt;= 1ms" />
        <string id="Event.SensorsCxIncorrectMinimumReportInterval" value="[SensorsCx] Minimum Report Interval (%3) in Sensor (%2) exposed by Device (%1) is 0" />
        <string id="Event.SensorsCxIncorrectMaxDataSize" value="[SensorsCx] MaxDataSize (%3) in Sensor (%2) exposed by Device (%1) is &lt;= sizeof(SENSOR_COLLECTION_LIST)" />
        <string id="Event.SensorsCxIncompatibleMaxDataSize" value="[SensorsCx] PKEY_Sensor_MaximumDataFieldSize_Bytes value=(%3) in Sensor (%2) exposed by Device (%1) is incorrect. Please  use CollectionsListGetMarshalledSize() instead of SENSOR_COLLECTION_LIST_SIZE() to compute the value for that property." />
        <string id="Event.SensorsCxIncorrectBatchSize" value="[SensorsCx] Batch Size (%3) in Sensor (%2) exposed by Device (%1) is more than the maximum amount" />
        <string id="Event.SensorsCxGetDataIntervalDDiFailure" value="[SensorsCx] Get Data Interval DDI call failed with NTSTATUS=(%4) [Device=(%1) Sensor=(%2) pIntervalMs=(%3)]" />
        <string id="Event.SensorsCxSetDataIntervalDDiFailure" value="[SensorsCx] Set Data Interval DDI call failed with NTSTATUS=(%4) [Device=(%1) Sensor=(%2) IntervalMs=(%3)]" />
        <string id="Event.SensorsCxGetDataThresholdsDDiFailure" value="[SensorsCx] Get Data Thresholds DDI call failed with NTSTATUS=(%5) [Device=(%1) Sensor=(%2) pThresholds=(%3) pSize=(%4)]" />
        <string id="Event.SensorsCxSetDataThresholdsDDiFailure" value="[SensorsCx] Set Data Thresholds DDI call failed with NTSTATUS=(%4) [Device=(%1) Sensor=(%2) pThresholds=(%3)]" />
        <string id="Event.SensorsCxGetPropertiesDDiFailure" value="[SensorsCx] Get Properties DDI call failed with NTSTATUS=(%5) [Device=(%1) Sensor=(%2) pProperties=(%3) pSize=(%4)]" />
        <string id="Event.SensorsCxGetSupportedDatafieldsDDiFailure" value="[SensorsCx] Get Supported Datafields DDI call failed with NTSTATUS=(%5) [Device=(%1) Sensor=(%2) pDatafields=(%3) pSize=(%4)]" />
        <string id="Event.SensorsCxGetDatafieldPropertiesDDiFailure" value="[SensorsCx] Get Datafield Properties DDI call failed with NTSTATUS=(%6) [Device=(%1) Sensor=(%2) pDatafield=(%3) pProperties=(%4) pSize=(%5)]" />
        <string id="Event.SensorsCxStartSensorDDiFailure" value="[SensorsCx] Start Sensor DDI call failed with NTSTATUS=(%3) [Device=(%1) Sensor=(%2)]" />
        <string id="Event.SensorsCxStopSensorDDiFailure" value="[SensorsCx] Stop Sensor DDI call failed with NTSTATUS=(%3) [Device=(%1) Sensor=(%2)]" />
        <string id="Event.SensorsCxStartHistoryDDiFailure" value="[SensorsCx] Start Sensor History DDI call failed with NTSTATUS=(%3) [Device=(%1) Sensor=(%2)]" />
        <string id="Event.SensorsCxStopHistoryDDiFailure" value="[SensorsCx] Stop Sensor History DDI call failed with NTSTATUS=(%3) [Device=(%1) Sensor=(%2)]" />
        <string id="Event.SensorsCxStartHistoryRetrievalDDiFailure" value="[SensorsCx] Start Sensor History DDI call failed with NTSTATUS=(%5) [Device=(%1) Sensor=(%2) pHistoryCollection=(%3) Size=(%4)]" />
        <string id="Event.SensorsCxCancelHistoryRetrievalDDiFailure" value="[SensorsCx] Start Sensor History DDI call failed with NTSTATUS=(%4) [Device=(%1) Sensor=(%2) pSize=(%3)]" />
        <string id="Event.SensorsCxClearHistoryDDiFailure" value="[SensorsCx] Clear Sensor History DDI call failed with NTSTATUS=(%3) [Device=(%1) Sensor=(%2)]" />
        <string id="Event.SensorsCxSetReportLatencyDdiFailure" value="[SensorsCx] Start Set Report Latency DDI call failed with NTSTATUS=(%4) [Device=(%1) Sensor=(%2) ReportLatencyMs=(%3)]" />
        <string id="Event.SensorsCxEnableWakeDdiFailure" value="[SensorsCx] Enable Wake DDI call failed with NTSTATUS=(%3) [Device=(%1) Sensor=(%2)]" />
        <string id="Event.SensorsCxDisableWakeDdiFailure" value="[SensorsCx] Disable Wake DDI call failed with NTSTATUS=(%3) [Device=(%1) Sensor=(%2)]" />
        <string id="Event.SensorsCxMissingSupportedActivities" value="[SensorsCx] PKEY_SensorData_SupportedActivityStates not exposed by activity sensor" />
        <string id="Event.SensorsCxMissingPowerConsumption" value="[SensorsCx] PKEY_Sensor_Power_Milliwatts not exposed by activity sensor" />
        <string id="Event.SensorsCxMissingSupportedStepTypes" value="[SensorsCx] PKEY_SensorData_SupportedStepTypes not exposed by pedometer" />
        <string id="Event.SensorsCxSensorRundown" value="[SensorsCx] Sensor Rundown: Device=(%1) Sensor=(%2) Type=(%3) Category=(%4) SubType=(%5) UniqueId=(%6) Name=(%7) Model=(%8) Manufacturer=(%9)" />
        <string id="Event.SensorsCxSensorSubscriberRundown" value="[SensorsCx] Sensor Subscriber Rundown: UniqueId=(%1) ProcessId=(%2) ReportIntervalMs=(%3) ReportLatency=(%4) IsStreaming=(%5)" />
        <string id="Event.SensorsCxSensorSubscriberOpen" value="[SensorsCx] Sensor opened: Type=(%1) UniqueId=(%2) ProcessId=(%2) Status=(%3)" />
        <string id="Event.SensorsCxSensorSubscriberClose" value="[SensorsCx] Sensor opened: Type=(%1) UniqueId=(%2) ProcessId=(%2) Status=(%3)" />
        <string id="Event.SensorsCxSensorSubscriberStart" value="[SensorsCx] Sensor started: Type=(%1) UniqueId=(%2) ProcessId=(%2) ReportIntervalMs=(%3) ReportLatency=(%4) IsStreaming=(%5) Status=(%6)" />
        <string id="Event.SensorsCxSensorSubscriberStop" value="[SensorsCx] Sensor stopped: Type=(%1) UniqueId=(%2) ProcessId=(%2) Status=(%3)" />
        <string id="Event.Sensors.DefaultDeviceSelection.FoundDeviceInterface" value="[Sensors] Found Interface=(%1)" />
        <string id="Event.Sensors.DefaultDeviceSelection.PickedDeviceInterface" value="[Sensors] Picked Interface=(%1) as the default interface" />
        <string id="Event.Sensors.DefaultDeviceSelection.FoundIsPrimary" value="[Sensors] Interface=(%1) marked as primary" />
        <string id="Event.Sensors.DefaultDeviceSelection.FoundConnectionTypeIntegrated" value="[Sensors] Interface=(%1) marked as integrated" />
        <string id="Event.Sensors.DefaultDeviceSelection.FoundPowerUsage" value="[Sensors] Interface=(%1) has power usage set to (%2)" />
        <string id="Event.Sensors.DefaultDeviceSelection.FoundHistory" value="[Sensors] Interface=(%1) marked as supporting history" />
        <string id="Event.Sensors.DefaultDeviceSelection.FoundAutobrightnessPreferred" value="[Sensors] Interface=(%1) marked as Auto-brightness preferred" />
        <string id="Event.Sensors.DefaultDeviceSelection.FoundColorCapable" value="[Sensors] Interface=(%1) marked as color capable" />
        <string id="Event.SensorsHid.Initialization.FoundSensor" value="[SensorsHid] Found Sensor=(%2) WdfDevice=(%1)" />
        <string id="Event.SensorsHid.Initialization.SkipSensor" value="[SensorsHid] Skipping unsupported Sensor=(%2) WdfDevice=(%1)" />
        <string id="Event.SensorsHid.Initialization.IncorrectReportIdCaps" value="[SensorsHid] Incorrect Report ID found in capabilities and reports of Sensor=(%2) don't match. Report ID found on capabilities is (%3). Report ID found on report is (%4). WdfDevice=(%1)" />
        <string id="Event.SensorsHid.ReportParsing.IncorrectReportId" value="[SensorsHid] Incorrect Report ID found in report (%2). WdfDevice=(%1)" />
        <string id="Event.SensorsHid.Initialization.HistorySupported" value="[SensorsHid] Sensor=(%2) with ReportId=(%3) supports history. WdfDevice=(%1)" />
        <string id="Event.SensorsHid.Initialization.FeatureUsageNotSelector" value="[SensorsHid] Feature Usage=(%4) reported by Sensor=(%2) with ReportId=(%3) must be a selector usage. WdfDevice=(%1)" />
        <string id="Event.SensorsHid.Initialization.AddedInputUsage" value="[SensorsHid] Datafield {%5-%6} was added for input Usage=(%4) reported by Sensor=(%2) with ReportId=(%3) must be a selector usage. WdfDevice=(%1)" />
        <string id="Event.SensorsHid.Initialization.AddedFeatureUsage" value="[SensorsHid] Property {%5-%6} was added for input Usage=(%4) reported by Sensor=(%2) with ReportId=(%3) must be a selector usage. WdfDevice=(%1)" />
        <string id="Event.SensorsHid.Initialization.AddedThreshold" value="[SensorsHid] Threshold {%5-%6} was added for input Usage=(%4) reported by Sensor=(%2) with ReportId=(%3) must be a selector usage. WdfDevice=(%1)" />
        <string id="Event.SensorsHid.Initialization.IncorrectTimestampUsage" value="[SensorsHid] Timestamp usage reported by Sensor=(%2) with ReportId=(%3) is ignored since it does not have right capabilities. (Expected Report Size=%4) (Actual Report Size=%5) (Expected Report Count=%6) (Actual Report Count=%7) (Expected Exponent=%8) (Actual Exponent=%9). WdfDevice=(%1)" />
        <string id="Event.SensorsHid.Initialization.ReportInterval.Supported" value="[SensorsHid] Report Interval is supported by Sensor=(%2) with ReportId=(%3). WdfDevice=(%1)" />
        <string id="Event.SensorsHid.Initialization.ReportInterval.Missing" value="[SensorsHid] Report Interval is missing in Sensor=(%2) with ReportId=(%3). WdfDevice=(%1)" />
        <string id="Event.SensorsHid.Initialization.SensorState.Supported" value="[SensorsHid] Sensor State is supported by Sensor=(%2) with ReportId=(%3). WdfDevice=(%1)" />
        <string id="Event.SensorsHid.Initialization.ReportingState.Supported" value="[SensorsHid] Reporting State is supported by Sensor=(%2) with ReportId=(%3). WdfDevice=(%1)" />
        <string id="Event.SensorsHid.Initialization.ReportingState.Missing" value="[SensorsHid] Reporting State is missing in Sensor=(%2) with ReportId=(%3). WdfDevice=(%1)" />
        <string id="Event.SensorsHid.Initialization.PowerState.Supported" value="[SensorsHid] Power State is supported by Sensor=(%2) with ReportId=(%3). WdfDevice=(%1)" />
        <string id="Event.SensorsHid.Initialization.PowerState.Missing" value="[SensorsHid] Power State is missing in Sensor=(%2) with ReportId=(%3). WdfDevice=(%1)" />
        <string id="Event.SensorsHid.Initialization.ReportLatency.Supported" value="[SensorsHid] Report Latency is supported by Sensor=(%2) with ReportId=(%3). WdfDevice=(%1)" />
        <string id="Event.SensorsHid.Initialization.Wake.Supported" value="[SensorsHid] Wake is supported by Sensor=(%2) with ReportId=(%3). WdfDevice=(%1)" />
        <string id="Event.SensorsHid.Initialization.Wake.NotSupported" value="[SensorsHid] IsWakeReportingStateSupported=(%4) and IsWakePowerStateSupported=(%5). Wake is not supported by Sensor=(%2) with ReportId=(%3). WdfDevice=(%1)" />
        <string id="Event.SensorsHid.Initialization.IncorrectReportLatency" value="[SensorsHid] Report Latency is marked as not supported by Sensor=(%2) with ReportId=(%3) since timestamp is missing. WdfDevice=(%1)" />
        <string id="Event.SensorsHid.GetInputReport.Failure" value="[SensorsHid] Failed to get input report from Sensor=(%2) with ReportId=(%3) NTSTATUS=(%4). WdfDevice=(%1)" />
        <string id="Event.SensorsHid.GetFeatureReport.Failure" value="[SensorsHid] Failed to get feature report from Sensor=(%2) with ReportId=(%3) NTSTATUS=(%4). WdfDevice=(%1)" />
        <string id="Event.SensorsHid.SetFeatureReport.Failure" value="[SensorsHid] Failed to set feature report from Sensor=(%2) with ReportId=(%3) NTSTATUS=(%4). WdfDevice=(%1)" />
        <string id="Event.SensorsHid.Initialization.ColorCapable" value="[SensorsHid] Sensor=(%2) with ReportId=(%3) is color capable. WdfDevice=(%1)" />
        <string id="Event.SensorService.Sdo.CreateSoftwareSdo" value="[SensorsHid] Using Accelerometer=(%1) to create Software SDO" />
        <string id="Event.SensorService.Sdo.CreateHardwareSdo" value="[SensorsHid] Using Hardware Offloaded SDO=(%1) to create hardware SDO" />
        <string id="Event.SensorService.Sdo.Remove" value="[SensorsHid] Removing SDO based on sensor=(%1)" />
        <string id="Event.SensorService.HuPr.SelectedSensor" value="[SensorService] New sensor selected for Instant On/Off with Interface=(%1), FriendlyName=(%2)" />
        <string id="Event.SensorService.HuPr.SensorStart" value="[SensorService] Sensor started for Instant On/Off with Interface=(%1) AbsoluteDistanceThreshold=(%2)" />
        <string id="Event.SensorService.HuPr.SensorStop" value="[SensorService] Sensor stopped for Instant On/Off with Interface=(%1)" />
        <string id="Event.SensorService.HuPr.SensorData" value="[SensorService] Sensor reported new data for Instant On/Off with Interface=(%1) IsValid=(%2) IsPresent=(%3) DetectedDistance=(%4)" />
        <string id="Event.SensorService.HuPr.WakeOrLockSignal" value="[SensorService] Instant On/Off has signaled for wake/lock with SignalType=(%1)" />
        <string id="Event.SensorService.HuPr.UserSettingsChanged" value="[SensorService] Instant On/Off setting has been changed by user with Setting=(%1) OldValue=(%2) NewValue=(%3)" />
      </stringTable>
    </resources>
  </localization>
</assembly>