<?xml version="1.0" encoding="utf-8" ?>
<Types>
  <Type>
    <Name>Microsoft.Management.Infrastructure.CimInstance#MSFT_IPAM_Address</Name>
    <Members>
      <ScriptProperty>
        <Name>NetworkType</Name>
        <GetScriptBlock>
          [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.VirtualizationType]($this.PSBase.CimInstanceProperties['NetworkType'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param($newValue)
          $this.PSBase.CimInstanceProperties['NetworkType'].Value = [System.String] [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.VirtualizationType] $newValue
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>AddressType</Name>
        <GetScriptBlock>
          [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.AddressFamily]($this.PSBase.CimInstanceProperties['AddressType'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param($newValue)
          $this.PSBase.CimInstanceProperties['AddressType'].Value = [System.String] [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.AddressFamily] $newValue
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>AddressCategory</Name>
        <GetScriptBlock>
          [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.AddressCategory]($this.PSBase.CimInstanceProperties['AddressCategory'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param($newValue)
          $this.PSBase.CimInstanceProperties['AddressCategory'].Value = [System.String] [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.AddressCategory] $newValue
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>IpAddress</Name>
        <GetScriptBlock>
          [OutputType([System.Net.IPAddress])]
          param()
          [System.Net.IPAddress]($this.PSBase.CimInstanceProperties['Address'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param([System.Net.IPAddress]$value)
          $this.PSBase.CimInstanceProperties['Address'].Value = [System.String]$value
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>ExpiryStatus</Name>
        <GetScriptBlock>
          [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.ExpiryStatus]($this.PSBase.CimInstanceProperties['ExpiryStatus'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param($newValue)
          $this.PSBase.CimInstanceProperties['ExpiryStatus'].Value = [System.String] [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.ExpiryStatus] $newValue
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>AssignmentType</Name>
        <GetScriptBlock>
          [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.AddressAssignment]($this.PSBase.CimInstanceProperties['AssignmentType'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param($newValue)
          $this.PSBase.CimInstanceProperties['AssignmentType'].Value = [System.String] [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.AddressAssignment] $newValue
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>IpAddressState</Name>
        <GetScriptBlock>
          [OutputType([System.String])]
          param()
          [System.String]($this.PSBase.CimInstanceProperties['IPAddressState'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param([System.String]$value)
          $this.PSBase.CimInstanceProperties['IPAddressState'].Value = [System.String]$value
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>DhcpReservationSync</Name>
        <GetScriptBlock>
          [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.DhcpReservationSyncStatus]($this.PSBase.CimInstanceProperties['DhcpReservationSync'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param($newValue)
          $this.PSBase.CimInstanceProperties['DhcpReservationSync'].Value = [System.String] [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.DhcpReservationSyncStatus] $newValue
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>DnsHostRecordSync</Name>
        <GetScriptBlock>
          [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.DnsSyncStatus]($this.PSBase.CimInstanceProperties['DnsHostRecordSync'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param($newValue)
          $this.PSBase.CimInstanceProperties['DnsHostRecordSync'].Value = [System.String] [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.DnsSyncStatus] $newValue
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>DnsPtrRecordSync</Name>
        <GetScriptBlock>
          [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.DnsSyncStatus]($this.PSBase.CimInstanceProperties['DnsPtrRecordSync'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param($newValue)
          $this.PSBase.CimInstanceProperties['DnsPtrRecordSync'].Value = [System.String] [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.DnsSyncStatus] $newValue
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>ReservationType</Name>
        <GetScriptBlock>
          [Nullable[Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.DhcpReservationType]]($this.PSBase.CimInstanceProperties['ReservationType'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param($newValue)
          $this.PSBase.CimInstanceProperties['ReservationType'].Value = [System.String] [Nullable[Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.DhcpReservationType]] $newValue
        </SetScriptBlock>
      </ScriptProperty>

      <ScriptProperty>
        <Name>CustomFields</Name>
        <GetScriptBlock>
          param()

          $output = @{};
          $isPrevCharSeperator = $false;
          $tempString = "";
          $nameValueFormat = $this.PSBase.CimInstanceProperties['CustomConfiguration'].Value;

          # Walk through the string, break the string at the Seperator character if it is not escaped.
          # And add to the string collection.
          for ( $i = 0; $i -lt $nameValueFormat.Length; $i++)
          {
          $currentChar = $nameValueFormat[$i];
          switch ($currentChar)
          {

          '\' {

          if ($isPrevCharSeperator)
          {
          $tempString += $currentChar;
          # As this character was not considered as a seperator.
          $isPrevCharSeperator = $false;
          }
          else
          {
          $isPrevCharSeperator = $true;
          }

          }

          ';' {

          # It is a escaped special character, we just treat it as a part of the name.
          if ($isPrevCharSeperator)
          {
          $tempString += $currentChar;
          }
          else
          {
          # If this is not a escaped seperator, we take the word till this point
          # as the end of a valid value.

          $value = $tempString;
          $output.Add($name, $value);
          $tempString = "";

          }
          $isPrevCharSeperator = $false;
          }

          '=' {

          # It is a escaped special character, we just treat it as a part of the name.
          if ($isPrevCharSeperator)
          {
          $tempString += $currentChar;
          }
          else
          {

          # This is the boundary of name=value.
          # Get the name and store it in the first item of the current tuple.

          $name = $tempString
          $tempString = "";
          }

          $isPrevCharSeperator = $false;
          }

          default {

          # The previous character was Escape Character and when combined with the
          # current character does not form a escape sequence, hence the previous
          # escape character is traeted as part of the string.
          if ($isPrevCharSeperator)
          {
          $tempString += '\';
          }

          # Any other character, just append it to the current word.
          $tempString += $currentChar;
          $isPrevCharSeperator = $false;
          }
          }
          }
          $output;
        </GetScriptBlock>
      </ScriptProperty>

    </Members>
  </Type>
  <Type>
    <Name>Microsoft.Management.Infrastructure.CimInstance#MSFT_IPAM_FreeAddress</Name>
    <Members>
      <ScriptProperty>
        <Name>IpAddress</Name>
        <GetScriptBlock>
          [OutputType([System.Net.IPAddress])]
          param()
          [System.Net.IPAddress]($this.PSBase.CimInstanceProperties['Address'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param([System.Net.IPAddress]$value)
          $this.PSBase.CimInstanceProperties['Address'].Value = [System.String]$value
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>PingStatus</Name>
        <GetScriptBlock>
          [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.PingStatus]($this.PSBase.CimInstanceProperties['PingStatus'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param($newValue)
          $this.PSBase.CimInstanceProperties['PingStatus'].Value = [System.String] [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.PingStatus] $newValue
        </SetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>DnsRecordStatus</Name>
        <GetScriptBlock>
          [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.DNSRecordStatus]($this.PSBase.CimInstanceProperties['DnsRecordStatus'].Value)
        </GetScriptBlock>
        <SetScriptBlock>
          param($newValue)
          $this.PSBase.CimInstanceProperties['DnsRecordStatus'].Value = [System.String] [Microsoft.PowerShell.Cmdletization.GeneratedTypes.Ipam.DNSRecordStatus] $newValue
        </SetScriptBlock>
      </ScriptProperty>

      
    </Members>
  </Type>  
</Types>
