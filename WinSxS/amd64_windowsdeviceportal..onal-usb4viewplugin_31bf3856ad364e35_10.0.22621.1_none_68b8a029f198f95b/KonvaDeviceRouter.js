var USB4View=USB4View?USB4View:{};USB4View.DeviceRouterAdapterGroupInnerPadding=5;USB4View.DeviceRouterAdapterGroupTopPadding=125;USB4View.DeviceRouterAdapterGroupWidth=180;USB4View.DeviceRouterPortPadding=5;USB4View.DeviceRouterTunnelConnectionLength=50;USB4View.DeviceRouterUFPExtract=.75;USB4View.KonvaDeviceRouter=(class{constructor(n,t){this.deviceRouter=n;this._container=t;this.parentConnection=null;this.x=null;this.y=null;this._sidebar=null;this.konvaObject=null;this._group=new Konva.Group;this._deviceRouterGroup=new Konva.Group;this._tunnelBoxesGroup=new Konva.Group;this._group.add(this._deviceRouterGroup,this._tunnelBoxesGroup);this._tunnelBoxes={};this._tunnelDeviceRouterConnector=new Konva.Line({stroke:"black",strokeWidth:20,points:[]});this._centerAlignX=(USB4View.NodeSize[0]-USB4View.DEVICEROUTERSIZE[0])/2;this._boundingRect=new Konva.Rect({x:this._centerAlignX,width:USB4View.DEVICEROUTERSIZE[0],height:USB4View.DEVICEROUTERSIZE[1],stroke:"black",strokeWidth:USB4View.STROKEWIDTH,fill:"#4672C4"});this._deviceRouterGroup.add(this._boundingRect);const i=this._centerAlignX+USB4View.DEVICEROUTERSIZE[0]/2;this._descText=new Konva.Text({x:this._centerAlignX,y:25,text:this._textDescription(),fontSize:30,fontFamily:"Consolas",align:"center",fill:"white",width:this._boundingRect.width(),height:100,verticalAlign:"middle"});this._deviceRouterGroup.add(this._descText);this._deviceRouterGroup.on("mouseover",()=>{document.body.style.cursor="pointer",this._boundingRect.setAttrs(USB4View.KonvaToggledProperty)});this._deviceRouterGroup.on("mouseout",()=>{document.body.style.cursor="default",this._boundingRect.setAttrs(USB4View.KonvaUntoggledProperty)});this._deviceRouterGroup.on("click",()=>{this._drawSidebar()});this._protocolAdapterGroups={};this._adapterGroupsGroup=new Konva.Group;this._pcieGroup=new USB4View.KonvaAdapterGroup(this.deviceRouter.adapters.filter(n=>n.kind==USB4View.PCIe&&n.isDownstream),this._adapterGroupsGroup);this._pcieGroup.setPosition(0,0);this._protocolAdapterGroups[USB4View.PCIe]=this._pcieGroup;this._usb3Group=new USB4View.KonvaAdapterGroup(this.deviceRouter.adapters.filter(n=>n.kind==USB4View.USB3&&n.isDownstream),this._adapterGroupsGroup);this._usb3Group.setPosition(USB4View.DeviceRouterAdapterGroupWidth+USB4View.DeviceRouterAdapterGroupInnerPadding,0);this._protocolAdapterGroups[USB4View.USB3]=this._usb3Group;this._dpGroup=new USB4View.KonvaAdapterGroup(this.deviceRouter.adapters.filter(n=>n.kind==USB4View.DP),this._adapterGroupsGroup);this._dpGroup.setPosition((USB4View.DeviceRouterAdapterGroupWidth+USB4View.DeviceRouterAdapterGroupInnerPadding)*2,0);this._protocolAdapterGroups[USB4View.DP]=this._dpGroup;const r=USB4View.DeviceRouterAdapterGroupInnerPadding*2+USB4View.DeviceRouterAdapterGroupWidth*3,u=i-r/2;this._adapterGroupsGroup.setAttrs({x:u,y:USB4View.DeviceRouterAdapterGroupTopPadding});this._deviceRouterGroup.add(this._adapterGroupsGroup);const f=USB4View.DeviceRouterPortPadding*(n.dfps.length-1)+USB4View.KonvaDFP.baseWidth*n.dfps.length,e=i-f/2;if(this._dfpGroup=new Konva.Group,this._konvaDFPs={},n.dfps.forEach((n,t)=>{let i=new USB4View.KonvaDFP(n,this._dfpGroup);this._konvaDFPs[n.portNumber]=i;i.setPosition(t*(i.width+USB4View.DeviceRouterPortPadding),0)}),Object.keys(this._konvaDFPs).length>0&&(this._dfpGroup.x(e),this._dfpGroup.y(this._boundingRect.height()-USB4View.KonvaDFP.baseHeight),this._deviceRouterGroup.add(this._dfpGroup)),this._konvaUFP=null,!n.isRoot()){this._konvaUFP=new USB4View.KonvaUFP(n.ufp,this._deviceRouterGroup);const t=i-USB4View.KonvaUFP.baseWidth/2,r=USB4View.DeviceRouterUFPExtract*USB4View.KonvaUFP.baseHeight*-1;this._konvaUFP.setPosition(t,r);this._deviceRouterGroup.y(USB4View.DeviceRouterUFPExtract*USB4View.KonvaUFP.baseHeight);[USB4View.USB3,USB4View.PCIe].forEach(t=>{let i=n.adapters.find(n=>n.kind==t&&!n.isDownstream);i&&this._konvaUFP.addAdapter(new USB4View.KonvaProtocolAdapter(i))})}}getParentConnectionPoint(){var n=Object.values(this._tunnelBoxes).filter(n=>n.isDrawn());return n.length>0&&n[0].isDrawn()?this._getTunnelBoxConnectionPoint():this.deviceRouter.isRoot()?this._getDeviceRouterConnectionPoint():this._getUFPTopConnectionPoint()}getChildConnectionPoint(n){const t=this._konvaDFPs[n],i=t.konvaObject.getAbsolutePosition(this._container);return{x:i.x+t.width/2,y:i.y+t.height}}removeTunnel(n){USB4View.assert(n in this._tunnelBoxes);const t=this._tunnelBoxes[n];if(this._moveProtocolAdapterOfTunnel(t.tunnel,!1),delete this._tunnelBoxes[n],t.isDrawn()){t.remove();const i=this._drawnTunnelBoxesCount();i==0&&this._tunnelDeviceRouterConnector.remove();const u=t.height*i;let r=u+USB4View.DeviceRouterUFPExtract*USB4View.KonvaUFP.baseHeight;i>0&&(r+=USB4View.DeviceRouterTunnelConnectionLength);this._deviceRouterGroup.y(r);Object.values(this._tunnelBoxes).forEach((n,t)=>{n.isDrawn()&&n.setPosition(0,t*n.height)});this._updateTunnelToDeviceRouterConnection(t)}}addTunnel(n){USB4View.assert(!(n.tunnelHandle in this._tunnelBoxes));let t=new USB4View.KonvaTunnelBox(n,this._tunnelBoxesGroup);if(this._tunnelBoxes[n.id]=t,this._moveProtocolAdapterOfTunnel(n,!0),!n.isFirstAssociatedDeviceRouter(this.deviceRouter)){const i=this._drawnTunnelBoxesCount();if(i<=0){const n=(USB4View.NodeSize[0]-t.width)/2;this._tunnelBoxesGroup.setAttrs({x:n,y:0})}const r=t.height*(i+1),u=r+USB4View.DeviceRouterUFPExtract*USB4View.KonvaUFP.baseHeight+USB4View.DeviceRouterTunnelConnectionLength;this._deviceRouterGroup.y(u);this._tunnelDeviceRouterConnector.getParent()||this._group.add(this._tunnelDeviceRouterConnector);t.setPosition(0,i*t.height);this._updateTunnelToDeviceRouterConnection(t)}}get tunnelBoxPadding(){return this._deviceRouterGroup.y()}setPosition(n,t){this.x=n;this.y=t;this._group.setAttrs({x:n,y:t});this.konvaObject==null&&(this.konvaObject=this._group,this._container.add(this.konvaObject))}remove(){this.konvaObject.remove();this.parentConnection.remove();this.konvaObject=null}isDrawn(){return this.konvaObject!=null&&this.konvaObject.getParent()!=null}get id(){return this.deviceRouter.id}get parentId(){return this.deviceRouter.upstreamDeviceRouterId}isKonvaTreeRoot(){return!1}isKonvaHostRouter(){return!1}isKonvaDeviceRouter(){return!0}toggleAdapterHighlight(n){this._dpGroup.toggleAdapterHighlight(n);this._usb3Group.toggleAdapterHighlight(n);this._pcieGroup.toggleAdapterHighlight(n);Object.values(this._konvaDFPs).forEach(t=>{t.toggleAdapterHighlight(n)});this.deviceRouter.isRoot()||this._konvaUFP.toggleAdapterHighlight(n)}_getTunnelBoxConnectionPoint(){const n=this._tunnelBoxesGroup.getAbsolutePosition(this._container);return{x:n.x+USB4View.KonvaTunnelBox.baseWidth/2,y:n.y}}_getDeviceRouterConnectionPoint(){const n=this._boundingRect.getAbsolutePosition(this._container);return{x:n.x+this._boundingRect.width()/2,y:n.y}}_getUFPTopConnectionPoint(){const n=this._konvaUFP.konvaObject.getAbsolutePosition(this._container);return{x:n.x+USB4View.KonvaUFP.baseWidth/2,y:n.y}}_updateTunnelToDeviceRouterConnection(n){const t=this._konvaUFP.konvaObject.getAbsolutePosition(this._group),i={x:t.x+USB4View.KonvaUFP.baseWidth/2,y:t.y},r={x:this._tunnelBoxesGroup.x()+n.width/2,y:this._tunnelBoxesGroup.y()+this._drawnTunnelBoxesCount()*n.height};this._tunnelDeviceRouterConnector.points([r.x,r.y,i.x,i.y])}_drawnTunnelBoxesCount(){return Object.values(this._tunnelBoxes).filter(n=>n.isDrawn()).length}_drawSidebar(){this._sidebar?this._sidebar.destroy():this._sidebar=new USB4View.SidebarDeviceRouter(this.deviceRouter,USB4View.SidebarDivId,this);this._sidebar.render()}_moveProtocolAdapterOfTunnel(n,t){let i=n.getSegmentInDeviceRouter(this.deviceRouter),u=i.startAdapter.kind==USB4View.Lane?i.startAdapter:i.endAdapter,r=i.startAdapter.kind!=USB4View.Lane?i.startAdapter:i.endAdapter,f=this._protocolAdapterGroups[r.kind],e=this._konvaUFP&&u.adapterNumber==this._konvaUFP.port.portNumber?this._konvaUFP:this._konvaDFPs[u.adapterNumber];t?this._moveProtocolAdapter(r,f,e):this._moveProtocolAdapter(r,e,f)}_moveProtocolAdapter(n,t,i){if(t&&i&&t.containsPCIeUSB3DownOrDPAdapter(n.adapterNumber)){var r=t.removeAdapter(n.adapterNumber);i.addAdapter(r)}}_textDescription(){let n=this.deviceRouter.pnpDeviceDescription+"\n";return n+="VendorId: "+USB4View.intToHexString(this.deviceRouter.vendorId)+"\n",n+("DeviceId: "+USB4View.intToHexString(this.deviceRouter.productId)+"\n")}})