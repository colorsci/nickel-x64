var USB4View=USB4View?USB4View:{};USB4View.DeviceRouter=(class{constructor(n){Object.assign(this,n);this.parentDeviceRouter=null;this.connectedParentDeviceRouterDFP=null;this.dfps.sort((n,t)=>n.portNumber-t.portNumber);this.dfps.forEach(n=>{n.isLaneAdaptersBonded=!1,n.currentLinkSpeed=null,n.negotiatedLinkWidth=null,n.targetLinkSpeed=null,n.targetLinkWidth=null});this.onPortInfoChange=()=>{}}get id(){return USB4View.generateDeviceRouterId(this)}get upstreamDeviceRouterId(){return this.isRoot()?USB4View.generateHostRouterId(this):USB4View.generateDeviceRouterId(this.ufp.connectedDeviceRouter)}isRoot(){return!this.ufp}static init(n,t){var i=new USB4View.DeviceRouter(n);if(t[i.id]=i,!i.isRoot())if(i.parentDeviceRouter=t[USB4View.generateDeviceRouterId(i.ufp.connectedDeviceRouter)],i.connectedParentDeviceRouterDFP=i.parentDeviceRouter.dfps.find(n=>i.isConnectedToUpstreamDFP(n)),i.connectedParentDeviceRouterDFP){i.connectedParentDeviceRouterDFP.connectedDeviceRouter={domainId:i.domainId,topologyId:i.topologyId,connectedPort:i.ufp.portNumber};i.connectedParentDeviceRouterDFP.isLaneAdaptersBonded=i.ufp.isLaneAdaptersBonded;i.connectedParentDeviceRouterDFP.currentLinkSpeed=i.ufp.currentLinkSpeed;i.connectedParentDeviceRouterDFP.negotiatedLinkWidth=i.ufp.negotiatedLinkWidth;i.connectedParentDeviceRouterDFP.targetLinkSpeed=i.ufp.targetLinkSpeed;i.connectedParentDeviceRouterDFP.targetLinkWidth=i.ufp.targetLinkWidth;i.parentDeviceRouter.onPortInfoChange(i.connectedParentDeviceRouterDFP)}else USB4View.assert(!1,"connected port was not defined in parent")}destroy(){if(!this.isRoot()&&this.connectedParentDeviceRouterDFP){this.connectedParentDeviceRouterDFP.connectedDeviceRouter=null;this.connectedParentDeviceRouterDFP.isLaneAdaptersBonded=!1;this.connectedParentDeviceRouterDFP.currentLinkSpeed=null;this.connectedParentDeviceRouterDFP.negotiatedLinkWidth=null;this.connectedParentDeviceRouterDFP.targetLinkSpeed=null;this.connectedParentDeviceRouterDFP.targetLinkWidth=null;this.parentDeviceRouter.onPortInfoChange(this.connectedParentDeviceRouterDFP)}}getParentDeviceRouterId(){const n=this.ufp.connectedDeviceRouter;return this.ufp!=null&&n!=null?USB4View.generateDeviceRouterId(n):null}isConnectedToUpstreamDFP(n){return n.portNumber==this.ufp.connectedDeviceRouter.connectedPort}getParentConnectedPortNumber(){return this.isRoot()?null:this.ufp.connectedDeviceRouter.connectedPort}})