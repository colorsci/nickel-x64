var USB4View=USB4View?USB4View:{};USB4View.KonvaTopology=(class{constructor(n,t,i){var r,u;this._topologyTree=n;this._konvaDivId=i;this._constrainedViewDivId=t;this._konvaDivHtmlElement=document.getElementById(i);this._konvaDeviceRouters={};this._konvaHostRouters={};this._tunnels={};this._sidebarDivHtmlElement=document.getElementById(USB4View.SidebarDivId);this._sidebarDivHtmlElement.innerHTML="";this._generateD3Tree=d3.tree().nodeSize(USB4View.NodeSize);this._stage=new Konva.Stage({width:this._konvaDivHtmlElement.clientWidth,height:this._konvaDivHtmlElement.clientHeight,container:this._konvaDivHtmlElement.id,draggable:!0});this._stage.scale({x:USB4View.InitScale,y:USB4View.InitScale});this._stage.on("wheel",n=>{this._onWheelChanged(n)});r=document.getElementById(this._constrainedViewDivId);const f=r.clientWidth/USB4View.InitScale/2,e=f-USB4View.NodeSize[0]/2;u=this._stage.width()/2-e;this._stage.x(-1*u*USB4View.InitScale);this._defaultLayer=new Konva.Layer;this._konvaTreeRoot=new USB4View.KonvaTreeRoot(this._defaultLayer,this._konvaDivHtmlElement);this._stage.add(this._defaultLayer);for(const n in this._topologyTree.deviceRouters){const t=this._topologyTree.deviceRouters[n];this._konvaDeviceRouters[n]=new USB4View.KonvaDeviceRouter(t,this._defaultLayer)}for(const n in this._topologyTree.hostRouters){const t=this._topologyTree.hostRouters[n];this._konvaHostRouters[n]=new USB4View.KonvaHostRouter(t,this._defaultLayer)}this._updateViewNoAnimation();window.onresize=()=>{this.updateView()}}updateView(){this._stage.width(this._konvaDivHtmlElement.clientWidth);this._stage.height(this._konvaDivHtmlElement.clientHeight);this._konvaTreeRoot.setPosition(this._konvaDivHtmlElement.clientWidth/2,0);this._removeNonExistingTunnels();this._removeDiffTopologyTree(this._konvaDeviceRouters,this._topologyTree.deviceRouters);this._removeDiffTopologyTree(this._konvaHostRouters,this._topologyTree.hostRouters);this._addDiffTopologyTree(this._konvaDeviceRouters,this._topologyTree.deviceRouters,USB4View.KonvaDeviceRouter);this._addDiffTopologyTree(this._konvaHostRouters,this._topologyTree.hostRouters,USB4View.KonvaHostRouter);this._addMissingTunnels();this._updateHostRoutersAndDeviceRouters()}static get maxDPTunnelsPerDeviceRouter(){return USB4View.KonvaDPGroup.maxDPAdapters}_addDiffTopologyTree(n,t,i){for(const r in t)r in n||(n[r]=new i(t[r],this._defaultLayer))}_removeDiffTopologyTree(n,t){for(const i in n)i in t||(n[i].remove(),delete n[i])}_onWheelChanged(n){n.evt.preventDefault();this._adjustZoom(n.evt.deltaY)}_adjustZoom(n){const r=this._stage.scaleX(),t=this._stage.getPointerPosition(),u={x:(t.x-this._stage.x())/r,y:(t.y-this._stage.y())/r},i=this._calculateNewScale(n,r);this._stage.scale({x:i,y:i});const f={x:t.x-u.x*i,y:t.y-u.y*i};this._stage.position(f)}_calculateNewScale(n,t){const i=n<=0;return i?Math.min(USB4View.MAXZOOM,t*USB4View.MOUSEWHEELSCALING):Math.max(USB4View.MINZOOM,t/USB4View.MOUSEWHEELSCALING)}_updateViewNoAnimation(){const n=this._generateD3Tree(this._generateHierarchy());this._addMissingTunnels();n.each(n=>{if(!n.data.isKonvaTreeRoot()){const t=this._d3PositionToCanvasPosition(n);n.data.setPosition(t.x,t.y);n.data.isKonvaDeviceRouter()&&this._drawParentConnection(n)}});this._defaultLayer.draw()}_d3PositionToCanvasPosition(n){const t=n.x+this._stage.width()/2,i=n.y-USB4View.NodeSize[1]+this._getTotalTunnelPadding(n);return{x:t,y:i}}_generateHierarchy(){const n=Object.values(this._konvaDeviceRouters).sort((n,t)=>{var i=n.id.toUpperCase(),r=t.id.toUpperCase();return i<r?-1:i>r?1:0}),t=n.concat(Object.values(this._konvaHostRouters)).concat(this._konvaTreeRoot);return d3.stratify().id(n=>n.id).parentId(n=>n.parentId)(t)}_removeNonExistingTunnels(){let t=Object.keys(this._tunnels);for(var n=0;n<t.length;n++){let i=t[n],r=this._tunnels[i];i in this._topologyTree.tunnels||(r.associatedDeviceRouters().forEach(n=>{let t=this._konvaDeviceRouters[n];t&&t.removeTunnel(i)}),delete this._tunnels[i])}}_addMissingTunnels(){for(const i in this._topologyTree.tunnels){const r=this._topologyTree.tunnels[i],u=r.associatedDeviceRouters();var n=i in this._tunnels,t=u.every(n=>n in this._konvaDeviceRouters);!n&&t&&(this._tunnels[i]=r,u.forEach(n=>{this._konvaDeviceRouters[n].addTunnel(r)}))}}_updateHostRoutersAndDeviceRouters(){const n=this._generateD3Tree(this._generateHierarchy());n.each(n=>{if(n.parent){var t=this._d3PositionToCanvasPosition(n);if(n.data.isDrawn())this._moveHostRouterOrDeviceRouterWithAnimation(n,t.x,t.y);else{const i=n.parent.data;n.data.setPosition(i.x,i.y+i.tunnelBoxPadding);n.data.isKonvaHostRouter()||this._drawParentConnection(n);this._moveHostRouterOrDeviceRouterWithAnimation(n,t.x,t.y)}}});this._defaultLayer.batchDraw()}_getTotalTunnelPadding(n){for(var i=0,t=n;t.parent;)t=t.parent,i+=t?t.data.tunnelBoxPadding:0;return i}_drawParentConnection(n){const t=new Konva.Line({stroke:"black",fill:"black",strokeWidth:20,points:this._getConnectionEndPoints(n.parent.data,n.data)});n.data.parentConnection=t;this._defaultLayer.add(t)}_getConnectionEndPoints(n,t){const i=n.getChildConnectionPoint(t.deviceRouter.getParentConnectedPortNumber()),r=t.getParentConnectionPoint();return[i.x,i.y,i.x,i.y+(r.y-i.y)/2,r.x,i.y+(r.y-i.y)/2,r.x,r.y]}_moveHostRouterOrDeviceRouterWithAnimation(n,t,i){var r=n.data;(r.x!=t||r.y!=i)&&r.konvaObject.to({x:t,y:i,onUpdate:()=>{this._updateNodeAnimation(n)},onFinish:()=>{this._updateNodeAnimation(n),n.children&&n.children.forEach(n=>{const t=n.data;t&&this._updateNodeAnimation(n,t)})}})}_updateNodeAnimation(n){var t=n.data;if(t.isDrawn()&&(t.setPosition(t.konvaObject.x(),t.konvaObject.y()),n.parent)){const i=t.parentConnection;i&&i.points(this._getConnectionEndPoints(n.parent.data,t))}}})