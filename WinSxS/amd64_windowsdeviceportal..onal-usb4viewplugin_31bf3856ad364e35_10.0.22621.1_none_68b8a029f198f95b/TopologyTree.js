var USB4View=USB4View?USB4View:{};USB4View.TopologyTree=(class{constructor(n,t){this._isRundown=!0;this.hostRouters={};this.deviceRouters={};this.tunnels={};this._konvaTopology=null;this._constrainedViewDivId=n;this._konvaDivId=t}addEvents(n){n.forEach(n=>{this._addEvent(n)});this._konvaTopology.updateView()}_addEvent(n){n.eventKind=="EvtAddDeviceRouter"?this._addDeviceRouter(n):n.eventKind=="EvtRemoveDeviceRouter"?this._removeDeviceRouter(n):n.eventKind=="EvtAddTunnel"?this._addTunnel(n):n.eventKind=="EvtRemoveTunnel"?this._removeTunnel(n):n.eventKind=="EvtAddHostRouter"?this._addHostRouter(n):n.eventKind=="EvtRemoveHostRouter"?this._removeHostRouter(n):n.eventKind=="EvtRundownStart"?this._validateRundownConstants(n):n.eventKind=="EvtRundownComplete"?(this._isRundown=!1,this._konvaTopology=new USB4View.KonvaTopology(this,this._constrainedViewDivId,this._konvaDivId)):console.log("Unexpected eventKind: "+n.eventKind,n)}_validateRundownConstants(n){if(n.maxUSB3DownAdaptersPerDeviceRouter>USB4View.MaxUSB3DownAdaptersPerDeviceRouter){let t=`maxUSB3DownAdaptersPerDeviceRouter is too large. Sent: ${n.maxUSB3DownAdaptersPerDeviceRouter}, Upper bound: ${USB4View.MaxUSB3DownAdaptersPerDeviceRouter}`;console.error(t);throw new Error(t);}if(n.maxPCIeDownAdaptersPerDeviceRouter>USB4View.MaxPCIeDownAdaptersPerDeviceRouter){let t=`maxPCIeDownAdaptersPerDeviceRouter is too large. Sent: ${n.maxPCIeDownAdaptersPerDeviceRouter}, Upper bound: ${USB4View.MaxPCIeDownAdaptersPerDeviceRouter}`;console.error(t);throw new Error(t);}if(n.maxDPInOutAdaptersPerDeviceRouter>USB4View.MaxDPInOutAdaptersPerDeviceRouter){let t=`maxDPInOutAdaptersPerDeviceRouter is too large. Sent: ${n.maxDPInOutAdaptersPerDeviceRouter}, Upper bound: ${USB4View.MaxDPInOutAdaptersPerDeviceRouter}`;console.error(t);throw new Error(t);}}_addDeviceRouter(n){USB4View.DeviceRouter.init(n,this.deviceRouters)}_removeDeviceRouter(n){const t=this.deviceRouters[USB4View.generateDeviceRouterId(n)];delete this.deviceRouters[t.id];t.destroy()}_addTunnel(n){this.tunnels[n.tunnelHandle]=new USB4View.Tunnel(n)}_removeTunnel(n){delete this.tunnels[n.tunnelHandle]}_addHostRouter(n){const t=new USB4View.HostRouter(n);this.hostRouters[t.id]=t}_removeHostRouter(n){delete this.hostRouters[USB4View.formatHostRouterId(n)]}})