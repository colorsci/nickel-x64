//***************************************************************************

//

//  File:	snmpsmir.mof

//

//  Purpose: registration information for snmp class provider.

//

// Copyright (c) 1997-2003 Microsoft Corporation, All Rights Reserved
//
//***************************************************************************

#pragma autorecover
#pragma classflags("forceupdate")

//	MOF Generated for module "RFC1213-MIB" by smi2smir version 1.50.972.0001
qualifier write:ToInstance ToSubClass;
qualifier read:ToInstance ToSubClass;
qualifier provider:ToInstance ToSubClass;
qualifier singleton:ToInstance ToSubClass;
qualifier dynamic:ToInstance ToSubClass;
qualifier textual_convention:ToInstance ToSubClass;
qualifier object_identifier:ToInstance ToSubClass;
qualifier encoding:ToInstance ToSubClass;
qualifier object_syntax:ToInstance ToSubClass;
qualifier status:ToInstance ToSubClass;
qualifier fixed_length:ToInstance ToSubClass;
qualifier variable_length:ToInstance ToSubClass;
qualifier variable_value:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier key_order:ToInstance ToSubClass;
qualifier enumeration:ToInstance ToSubClass;
qualifier bits:ToInstance ToSubClass;
qualifier description:ToInstance ToSubClass;
qualifier display_hint:ToInstance ToSubClass;
qualifier defval:ToInstance ToSubClass;
qualifier units:ToInstance ToSubClass;
qualifier reference:ToInstance ToSubClass;
qualifier virtual_key:ToInstance ToSubClass;
qualifier rowstatus:ToInstance ToSubClass;
qualifier module_name:ToInstance ToSubClass;
qualifier module_imports:ToInstance ToSubClass;
qualifier group_objectid:ToInstance ToSubClass;
qualifier VarBindIndex:ToInstance ToSubClass;

#pragma namespace("\\\\.\\root")

instance of __Namespace
{
	Name = "snmp" ;
} ;

#pragma namespace("\\\\.\\root\\snmp")

class SMIR : __namespace
{
[read] string Name="SMIR";
};

instance of SMIR
{
	Name = "SMIR";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[abstract]
class SnmpMacro
{
};

[abstract]
class SnmpObjectType:SnmpMacro
{
};

class SnmpNotifyStatus:__ExtendedStatus
{
[write] sint32 SnmpStatusCode;
[write] string Description;
};

class SNMP_MODULE:__namespace
{
[read] string Name;
[read] string Module_Oid;
[read] string Module_Identity;
[read] string Organization;
[read] string Contact_Inf;
[read] string Description;
[read] string Revision;
[read] string Last_Updated;
[read] sint32 Snmp_Version;
[read] string Module_Imports;
};

[Association]
class ModuleToClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[Association]
class GroupToClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirGroup;
};

[Association]
class ModToNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[Association]
class ModToExtNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
instance of SNMP_MODULE
{
Name="RFC1213_MIB";
Module_Oid="1.3.6.1.2.1.11";
Module_Identity="rfc1213mibV1ModuleIdentity";
Organization="";
Contact_Inf="";
Description="RFC1213-MIB";
Revision="";
Last_Updated="0000000000Z";
Snmp_Version=1;
Module_Imports="RFC1155-SMI,RFC-1212";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB")
class SNMP_GROUP:__namespace
{
[read] string Name;
[read] string Group_Id;
[read] string Status;
[read] string Description;
[read] string Reference;
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB")
instance of SNMP_GROUP
{
Name="snmpV1ObjectGroup";
Group_Id="1.3.6.1.2.1.11";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[module_name("RFC1213-MIB"), singleton, group_objectid("1.3.6.1.2.1.11"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_snmp : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.28"), read, status("mandatory")] uint32 snmpOutGetResponses;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.1"), read, status("mandatory")] uint32 snmpInPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.19"), read, status("mandatory")] uint32 snmpInTraps;
	[textual_convention("EnumeratedINTEGER"), enumeration("enabled(1),disabled(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.11.30"), read, write, status("mandatory")] string snmpEnableAuthenTraps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.2"), read, status("mandatory")] uint32 snmpOutPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.5"), read, status("mandatory")] uint32 snmpInBadCommunityUses;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.29"), read, status("mandatory")] uint32 snmpOutTraps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.12"), read, status("mandatory")] uint32 snmpInGenErrs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.8"), read, status("mandatory")] uint32 snmpInTooBigs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.4"), read, status("mandatory")] uint32 snmpInBadCommunityNames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.16"), read, status("mandatory")] uint32 snmpInGetNexts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.24"), read, status("mandatory")] uint32 snmpOutGenErrs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.20"), read, status("mandatory")] uint32 snmpOutTooBigs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.10"), read, status("mandatory")] uint32 snmpInBadValues;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.11"), read, status("mandatory")] uint32 snmpInReadOnlys;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.26"), read, status("mandatory")] uint32 snmpOutGetNexts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.22"), read, status("mandatory")] uint32 snmpOutBadValues;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.9"), read, status("mandatory")] uint32 snmpInNoSuchNames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.3"), read, status("mandatory")] uint32 snmpInBadVersions;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.6"), read, status("mandatory")] uint32 snmpInASNParseErrs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.15"), read, status("mandatory")] uint32 snmpInGetRequests;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.17"), read, status("mandatory")] uint32 snmpInSetRequests;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.21"), read, status("mandatory")] uint32 snmpOutNoSuchNames;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.13"), read, status("mandatory")] uint32 snmpInTotalReqVars;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.14"), read, status("mandatory")] uint32 snmpInTotalSetVars;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.18"), read, status("mandatory")] uint32 snmpInGetResponses;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.25"), read, status("mandatory")] uint32 snmpOutGetRequests;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.11.27"), read, status("mandatory")] uint32 snmpOutSetRequests;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_snmpSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"RFC1213_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_snmp";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_snmpSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB:SNMP_GROUP.Name=\"snmpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_snmp";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB")
instance of SNMP_GROUP
{
Name="ipV1ObjectGroup";
Group_Id="1.3.6.1.2.1.4";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[module_name("RFC1213-MIB"), singleton, group_objectid("1.3.6.1.2.1.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_ip : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.18"), read, status("mandatory")] uint32 ipFragFails;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.2"), read, write, status("mandatory")] sint32 ipDefaultTTL;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.8"), read, status("mandatory")] uint32 ipInDiscards;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.16"), read, status("mandatory")] uint32 ipReasmFails;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.3"), read, status("mandatory")] uint32 ipInReceives;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.9"), read, status("mandatory")] uint32 ipInDelivers;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.14"), read, status("mandatory")] uint32 ipReasmReqds;
	[textual_convention("EnumeratedINTEGER"), enumeration("forwarding(1),not-forwarding(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.4.1"), read, write, status("mandatory")] string ipForwarding;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.19"), read, status("mandatory")] uint32 ipFragCreates;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.4"), read, status("mandatory")] uint32 ipInHdrErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.11"), read, status("mandatory")] uint32 ipOutDiscards;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.12"), read, status("mandatory")] uint32 ipOutNoRoutes;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.10"), read, status("mandatory")] uint32 ipOutRequests;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.5"), read, status("mandatory")] uint32 ipInAddrErrors;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.13"), read, status("mandatory")] sint32 ipReasmTimeout;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.6"), read, status("mandatory")] uint32 ipForwDatagrams;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.23"), read, status("mandatory")] uint32 ipRoutingDiscards;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.7"), read, status("mandatory")] uint32 ipInUnknownProtos;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.17"), read, status("mandatory")] uint32 ipFragOKs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.4.15"), read, status("mandatory")] uint32 ipReasmOKs;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_ipSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"RFC1213_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_ip";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_ipSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB:SNMP_GROUP.Name=\"ipV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_ip";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[module_name("RFC1213-MIB"), group_objectid("1.3.6.1.2.1.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_ipRouteTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.21.1.10"), read, write, status("mandatory")] sint32 ipRouteAge;
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("OBJECTIDENTIFIER"), object_identifier("1.3.6.1.2.1.4.21.1.13"), read, status("mandatory")] string ipRouteInfo;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.4.21.1.11"), read, write, status("mandatory")] string ipRouteMask;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.4.21.1.1"), read, write, status("mandatory"), key, key_order(1)] string ipRouteDest;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),invalid(2),direct(3),indirect(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.4.21.1.8"), read, write, status("mandatory")] string ipRouteType;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),local(2),netmgmt(3),icmp(4),egp(5),ggp(6),hello(7),rip(8),is-is(9),es-is(10),ciscoIgrp(11),bbnSpfIgp(12),ospf(13),bgp(14)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.4.21.1.9"), read, status("mandatory")] string ipRouteProto;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.21.1.3"), read, write, status("mandatory")] sint32 ipRouteMetric1;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.21.1.4"), read, write, status("mandatory")] sint32 ipRouteMetric2;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.21.1.5"), read, write, status("mandatory")] sint32 ipRouteMetric3;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.21.1.6"), read, write, status("mandatory")] sint32 ipRouteMetric4;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.21.1.12"), read, write, status("mandatory")] sint32 ipRouteMetric5;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.21.1.2"), read, write, status("mandatory")] sint32 ipRouteIfIndex;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.4.21.1.7"), read, write, status("mandatory")] string ipRouteNextHop;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_ipRouteTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"RFC1213_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_ipRouteTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_ipRouteTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB:SNMP_GROUP.Name=\"ipV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_ipRouteTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[module_name("RFC1213-MIB"), group_objectid("1.3.6.1.2.1.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_ipAddrTable : SnmpObjectType
{
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.4.20.1.1"), read, status("mandatory"), key, key_order(1)] string ipAdEntAddr;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.20.1.2"), read, status("mandatory")] sint32 ipAdEntIfIndex;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.4.20.1.3"), read, status("mandatory")] string ipAdEntNetMask;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.20.1.4"), read, status("mandatory")] sint32 ipAdEntBcastAddr;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.4.20.1.5"), read, status("mandatory")] sint32 ipAdEntReasmMaxSize;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_ipAddrTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"RFC1213_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_ipAddrTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_ipAddrTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB:SNMP_GROUP.Name=\"ipV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_ipAddrTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[module_name("RFC1213-MIB"), group_objectid("1.3.6.1.2.1.4"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_ipNetToMediaTable : SnmpObjectType
{
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.4.22.1.3"), read, write, status("mandatory"), key, key_order(2)] string ipNetToMediaNetAddress;
	[textual_convention("PhysAddress"), encoding("OCTETSTRING"), object_syntax("PhysAddress"), object_identifier("1.3.6.1.2.1.4.22.1.2"), read, write, status("mandatory")] string ipNetToMediaPhysAddress;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),invalid(2),dynamic(3),static(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.4.22.1.4"), read, write, status("mandatory")] string ipNetToMediaType;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.4.22.1.1"), read, write, status("mandatory"), key, key_order(1)] sint32 ipNetToMediaIfIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_ipNetToMediaTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"RFC1213_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_ipNetToMediaTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_ipNetToMediaTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB:SNMP_GROUP.Name=\"ipV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_ipNetToMediaTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB")
instance of SNMP_GROUP
{
Name="interfacesV1ObjectGroup";
Group_Id="1.3.6.1.2.1.2";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[module_name("RFC1213-MIB"), singleton, group_objectid("1.3.6.1.2.1.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_interfaces : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.2.1"), read, status("mandatory")] sint32 ifNumber;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_interfacesSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"RFC1213_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_interfaces";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_interfacesSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB:SNMP_GROUP.Name=\"interfacesV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_interfaces";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[module_name("RFC1213-MIB"), group_objectid("1.3.6.1.2.1.2"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_ifTable : SnmpObjectType
{
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("OBJECTIDENTIFIER"), object_identifier("1.3.6.1.2.1.2.2.1.22"), read, status("mandatory")] string ifSpecific;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.2.2.1.10"), read, status("mandatory")] uint32 ifInOctets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.2.2.1.14"), read, status("mandatory")] uint32 ifInErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.2.2.1.16"), read, status("mandatory")] uint32 ifOutOctets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.2.2.1.20"), read, status("mandatory")] uint32 ifOutErrors;
	[textual_convention("TimeTicks"), encoding("TimeTicks"), object_syntax("TimeTicks"), object_identifier("1.3.6.1.2.1.2.2.1.9"), read, status("mandatory")] uint32 ifLastChange;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.2.2.1.13"), read, status("mandatory")] uint32 ifInDiscards;
	[textual_convention("EnumeratedINTEGER"), enumeration("up(1),down(2),testing(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.2.2.1.8"), read, status("mandatory")] string ifOperStatus;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.2.2.1.11"), read, status("mandatory")] uint32 ifInUcastPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.2.2.1.19"), read, status("mandatory")] uint32 ifOutDiscards;
	[textual_convention("PhysAddress"), encoding("OCTETSTRING"), object_syntax("PhysAddress"), object_identifier("1.3.6.1.2.1.2.2.1.6"), read, status("mandatory")] string ifPhysAddress;
	[textual_convention("EnumeratedINTEGER"), enumeration("up(1),down(2),testing(3)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.2.2.1.7"), read, write, status("mandatory")] string ifAdminStatus;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.2.2.1.12"), read, status("mandatory")] uint32 ifInNUcastPkts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.2.2.1.17"), read, status("mandatory")] uint32 ifOutUcastPkts;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.2.2.1.4"), read, status("mandatory")] sint32 ifMtu;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.2.2.1.18"), read, status("mandatory")] uint32 ifOutNUcastPkts;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),regular1822(2),hdh1822(3),ddn-x25(4),rfc877-x25(5),ethernet-csmacd(6),iso88023-csmacd(7),iso88024-tokenBus(8),iso88025-tokenRing(9),iso88026-man(10),starLan(11),proteon-10Mbit(12),proteon-80Mbit(13),hyperchannel(14),fddi(15),lapb(16),sdlc(17),ds1(18),e1(19),basicISDN(20),primaryISDN(21),propPointToPointSerial(22),ppp(23),softwareLoopback(24),eon(25),ethernet-3Mbit(26),nsip(27),slip(28),ultra(29),ds3(30),sip(31),frame-relay(32)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.2.2.1.3"), read, status("mandatory")] string ifType;
	[textual_convention("Gauge"), encoding("Gauge"), object_syntax("Gauge"), object_identifier("1.3.6.1.2.1.2.2.1.5"), read, status("mandatory")] uint32 ifSpeed;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("0..255"), object_identifier("1.3.6.1.2.1.2.2.1.2"), read, status("mandatory")] string ifDescr;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.2.2.1.1"), read, status("mandatory"), key, key_order(1)] sint32 ifIndex;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.2.2.1.15"), read, status("mandatory")] uint32 ifInUnknownProtos;
	[textual_convention("Gauge"), encoding("Gauge"), object_syntax("Gauge"), object_identifier("1.3.6.1.2.1.2.2.1.21"), read, status("mandatory")] uint32 ifOutQLen;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_ifTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"RFC1213_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_ifTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_ifTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB:SNMP_GROUP.Name=\"interfacesV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_ifTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB")
instance of SNMP_GROUP
{
Name="icmpV1ObjectGroup";
Group_Id="1.3.6.1.2.1.5";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[module_name("RFC1213-MIB"), singleton, group_objectid("1.3.6.1.2.1.5"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_icmp : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.1"), read, status("mandatory")] uint32 icmpInMsgs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.24"), read, status("mandatory")] uint32 icmpOutTimestampReps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.8"), read, status("mandatory")] uint32 icmpInEchos;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.14"), read, status("mandatory")] uint32 icmpOutMsgs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.21"), read, status("mandatory")] uint32 icmpOutEchos;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.2"), read, status("mandatory")] uint32 icmpInErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.15"), read, status("mandatory")] uint32 icmpOutErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.9"), read, status("mandatory")] uint32 icmpInEchoReps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.12"), read, status("mandatory")] uint32 icmpInAddrMasks;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.4"), read, status("mandatory")] uint32 icmpInTimeExcds;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.5"), read, status("mandatory")] uint32 icmpInParmProbs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.22"), read, status("mandatory")] uint32 icmpOutEchoReps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.7"), read, status("mandatory")] uint32 icmpInRedirects;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.25"), read, status("mandatory")] uint32 icmpOutAddrMasks;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.6"), read, status("mandatory")] uint32 icmpInSrcQuenchs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.17"), read, status("mandatory")] uint32 icmpOutTimeExcds;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.18"), read, status("mandatory")] uint32 icmpOutParmProbs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.20"), read, status("mandatory")] uint32 icmpOutRedirects;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.10"), read, status("mandatory")] uint32 icmpInTimestamps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.19"), read, status("mandatory")] uint32 icmpOutSrcQuenchs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.13"), read, status("mandatory")] uint32 icmpInAddrMaskReps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.23"), read, status("mandatory")] uint32 icmpOutTimestamps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.3"), read, status("mandatory")] uint32 icmpInDestUnreachs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.26"), read, status("mandatory")] uint32 icmpOutAddrMaskReps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.16"), read, status("mandatory")] uint32 icmpOutDestUnreachs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.5.11"), read, status("mandatory")] uint32 icmpInTimestampReps;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_icmpSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"RFC1213_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_icmp";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_icmpSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB:SNMP_GROUP.Name=\"icmpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_icmp";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB")
instance of SNMP_GROUP
{
Name="tcpV1ObjectGroup";
Group_Id="1.3.6.1.2.1.6";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[module_name("RFC1213-MIB"), singleton, group_objectid("1.3.6.1.2.1.6"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_tcp : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.6.4"), read, status("mandatory")] sint32 tcpMaxConn;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.6.11"), read, status("mandatory")] uint32 tcpOutSegs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.6.15"), read, status("mandatory")] uint32 tcpOutRsts;
	[textual_convention("Gauge"), encoding("Gauge"), object_syntax("Gauge"), object_identifier("1.3.6.1.2.1.6.9"), read, status("mandatory")] uint32 tcpCurrEstab;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.6.5"), read, status("mandatory")] uint32 tcpActiveOpens;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.6.8"), read, status("mandatory")] uint32 tcpEstabResets;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.6.12"), read, status("mandatory")] uint32 tcpRetransSegs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.6.7"), read, status("mandatory")] uint32 tcpAttemptFails;
	[textual_convention("EnumeratedINTEGER"), enumeration("other(1),constant(2),rsre(3),vanj(4)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.6.1"), read, status("mandatory")] string tcpRtoAlgorithm;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.6.6"), read, status("mandatory")] uint32 tcpPassiveOpens;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.6.10"), read, status("mandatory")] uint32 tcpInSegs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.6.14"), read, status("mandatory")] uint32 tcpInErrs;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.6.2"), read, status("mandatory")] sint32 tcpRtoMin;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.6.3"), read, status("mandatory")] sint32 tcpRtoMax;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_tcpSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"RFC1213_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_tcp";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_tcpSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB:SNMP_GROUP.Name=\"tcpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_tcp";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[module_name("RFC1213-MIB"), group_objectid("1.3.6.1.2.1.6"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_tcpConnTable : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("closed(1),listen(2),synSent(3),synReceived(4),established(5),finWait1(6),finWait2(7),closeWait(8),lastAck(9),closing(10),timeWait(11),deleteTCB(12)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.6.13.1.1"), read, write, status("mandatory")] string tcpConnState;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.6.13.1.5"), read, status("mandatory"), key, key_order(4)] sint32 tcpConnRemPort;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.6.13.1.3"), read, status("mandatory"), key, key_order(2)] sint32 tcpConnLocalPort;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.6.13.1.4"), read, status("mandatory"), key, key_order(3)] string tcpConnRemAddress;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.6.13.1.2"), read, status("mandatory"), key, key_order(1)] string tcpConnLocalAddress;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_tcpConnTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"RFC1213_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_tcpConnTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_tcpConnTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB:SNMP_GROUP.Name=\"tcpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_tcpConnTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB")
instance of SNMP_GROUP
{
Name="egpV1ObjectGroup";
Group_Id="1.3.6.1.2.1.8";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[module_name("RFC1213-MIB"), singleton, group_objectid("1.3.6.1.2.1.8"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_egp : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.3"), read, status("mandatory")] uint32 egpOutMsgs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.2"), read, status("mandatory")] uint32 egpInErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.4"), read, status("mandatory")] uint32 egpOutErrors;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.8.6"), read, status("mandatory")] sint32 egpAs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.1"), read, status("mandatory")] uint32 egpInMsgs;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_egpSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"RFC1213_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_egp";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_egpSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB:SNMP_GROUP.Name=\"egpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_egp";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[module_name("RFC1213-MIB"), group_objectid("1.3.6.1.2.1.8"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_egpNeighTable : SnmpObjectType
{
	[textual_convention("EnumeratedINTEGER"), enumeration("start(1),stop(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.8.5.1.15"), read, write, status("mandatory")] string egpNeighEventTrigger;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.8.5.1.13"), read, status("mandatory")] sint32 egpNeighIntervalPoll;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.8.5.1.12"), read, status("mandatory")] sint32 egpNeighIntervalHello;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.8.5.1.2"), read, status("mandatory"), key, key_order(1)] string egpNeighAddr;
	[textual_convention("EnumeratedINTEGER"), enumeration("active(1),passive(2)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.8.5.1.14"), read, status("mandatory")] string egpNeighMode;
	[textual_convention("EnumeratedINTEGER"), enumeration("idle(1),acquisition(2),down(3),up(4),cease(5)"), encoding("INTEGER"), object_syntax("EnumeratedINTEGER"), object_identifier("1.3.6.1.2.1.8.5.1.1"), read, status("mandatory")] string egpNeighState;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.5.1.4"), read, status("mandatory")] uint32 egpNeighInMsgs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.5.1.5"), read, status("mandatory")] uint32 egpNeighInErrs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.5.1.6"), read, status("mandatory")] uint32 egpNeighOutMsgs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.5.1.7"), read, status("mandatory")] uint32 egpNeighOutErrs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.5.1.10"), read, status("mandatory")] uint32 egpNeighStateUps;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.5.1.8"), read, status("mandatory")] uint32 egpNeighInErrMsgs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.5.1.9"), read, status("mandatory")] uint32 egpNeighOutErrMsgs;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.8.5.1.11"), read, status("mandatory")] uint32 egpNeighStateDowns;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.8.5.1.3"), read, status("mandatory")] sint32 egpNeighAs;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_egpNeighTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"RFC1213_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_egpNeighTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_egpNeighTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB:SNMP_GROUP.Name=\"egpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_egpNeighTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB")
instance of SNMP_GROUP
{
Name="udpV1ObjectGroup";
Group_Id="1.3.6.1.2.1.7";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[module_name("RFC1213-MIB"), singleton, group_objectid("1.3.6.1.2.1.7"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_udp : SnmpObjectType
{
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.7.2"), read, status("mandatory")] uint32 udpNoPorts;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.7.3"), read, status("mandatory")] uint32 udpInErrors;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.7.1"), read, status("mandatory")] uint32 udpInDatagrams;
	[textual_convention("Counter"), encoding("Counter"), object_syntax("Counter"), object_identifier("1.3.6.1.2.1.7.4"), read, status("mandatory")] uint32 udpOutDatagrams;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_udpSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"RFC1213_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_udp";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_udpSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB:SNMP_GROUP.Name=\"udpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_udp";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[module_name("RFC1213-MIB"), group_objectid("1.3.6.1.2.1.7"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_udpTable : SnmpObjectType
{
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..65535"), object_identifier("1.3.6.1.2.1.7.5.1.2"), read, status("mandatory"), key, key_order(2)] sint32 udpLocalPort;
	[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"), object_identifier("1.3.6.1.2.1.7.5.1.1"), read, status("mandatory"), key, key_order(1)] string udpLocalAddress;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_udpTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"RFC1213_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_udpTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_udpTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB:SNMP_GROUP.Name=\"udpV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_udpTable";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB")
instance of SNMP_GROUP
{
Name="systemV1ObjectGroup";
Group_Id="1.3.6.1.2.1.1";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[module_name("RFC1213-MIB"), singleton, group_objectid("1.3.6.1.2.1.1"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_system : SnmpObjectType
{
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("0..255"), object_identifier("1.3.6.1.2.1.1.4"), read, write, status("mandatory")] string sysContact;
	[textual_convention("OBJECTIDENTIFIER"), encoding("OBJECTIDENTIFIER"), object_syntax("OBJECTIDENTIFIER"), object_identifier("1.3.6.1.2.1.1.2"), read, status("mandatory")] string sysObjectID;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("0..255"), object_identifier("1.3.6.1.2.1.1.6"), read, write, status("mandatory")] string sysLocation;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), variable_value("0..127"), object_identifier("1.3.6.1.2.1.1.7"), read, status("mandatory")] sint32 sysServices;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("0..255"), object_identifier("1.3.6.1.2.1.1.5"), read, write, status("mandatory")] string sysName;
	[textual_convention("DisplayString"), encoding("OCTETSTRING"), object_syntax("DisplayString"), variable_length("0..255"), object_identifier("1.3.6.1.2.1.1.1"), read, status("mandatory")] string sysDescr;
	[textual_convention("TimeTicks"), encoding("TimeTicks"), object_syntax("TimeTicks"), object_identifier("1.3.6.1.2.1.1.3"), read, status("mandatory")] uint32 sysUpTime;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_systemSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"RFC1213_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_system";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_systemSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB:SNMP_GROUP.Name=\"systemV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_system";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB")
instance of SNMP_GROUP
{
Name="atV1ObjectGroup";
Group_Id="1.3.6.1.2.1.3";
Status="current";
Description="";
Reference="";
};

#pragma namespace("\\\\.\\root\\snmp\\SMIR")
[module_name("RFC1213-MIB"), group_objectid("1.3.6.1.2.1.3"), dynamic, provider("MS_SNMP_INSTANCE_PROVIDER")]
class SNMP_RFC1213_MIB_atTable : SnmpObjectType
{
	[textual_convention("NetworkAddress"), encoding("NetworkAddress"), object_syntax("NetworkAddress"), object_identifier("1.3.6.1.2.1.3.1.1.3"), read, write, status("deprecated"), key, key_order(2)] string atNetAddress;
	[textual_convention("PhysAddress"), encoding("OCTETSTRING"), object_syntax("PhysAddress"), object_identifier("1.3.6.1.2.1.3.1.1.2"), read, write, status("deprecated")] string atPhysAddress;
	[textual_convention("INTEGER"), encoding("INTEGER"), object_syntax("INTEGER"), object_identifier("1.3.6.1.2.1.3.1.1.1"), read, write, status("deprecated"), key, key_order(1)] sint32 atIfIndex;
};
instance of ModuleToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_atTableSMIRModuleAssociation";
SmirModule="\\\\.\\root\\snmp\\SMIR:SNMP_MODULE.Name=\"RFC1213_MIB\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_atTable";
};

instance of GroupToClassAssociator
{
AssocName="SNMP_RFC1213_MIB_atTableSMIRGroupAssociation";
SmirGroup="\\\\.\\root\\snmp\\SMIR\\RFC1213_MIB:SNMP_GROUP.Name=\"atV1ObjectGroup\"";
SmirClass="\\\\.\\root\\snmp\\SMIR:SNMP_RFC1213_MIB_atTable";
};

class SnmpVarBind
{
[read, Description("The ASN type of the variable in the Value property.")]
string Encoding;
[read, Description("The object identifier of the variable in the Value property.")]
string ObjectIdentifier;
[read, Description("The raw data value of the variable in octets.")]
uint8 Value[];
};

class SnmpNotification:__ExtrinsicEvent
{
[textual_convention("TimeTicks"):ToInstance ToSubClass DisableOverride,encoding("TimeTicks"):ToInstance ToSubClass DisableOverride,object_syntax("TimeTicks"):ToInstance ToSubClass DisableOverride,read,object_identifier("1.3.6.1.2.1.1.3"):ToInstance ToSubClass DisableOverride,description("The time (in hundredths of a second) since the network management portion of the agent was last re-initialized."):ToInstance ToSubClass DisableOverride] uint32 TimeStamp;
[textual_convention("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, encoding("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, object_syntax("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, read, object_identifier("1.3.6.1.6.3.1.1.4.1"):ToInstance ToSubClass DisableOverride,description("The authoratative identification of this notification."):ToInstance ToSubClass DisableOverride] string Identification;
[read, description("The network address of the entity that created this notification."):ToInstance ToSubClass DisableOverride] string AgentAddress;
[read, description("The network address of the entity that sent this notification. This may be a proxy for the original entity."):ToInstance ToSubClass DisableOverride] string AgentTransportAddress;
[read, description("The transport protocol used by the sending entity."):ToInstance ToSubClass DisableOverride] string AgentTransportProtocol;
[read, description("The security context used to send this notification."):ToInstance ToSubClass DisableOverride] string Community;
};

class SnmpExtendedNotification:__ExtrinsicEvent
{
[textual_convention("TimeTicks"):ToInstance ToSubClass DisableOverride,encoding("TimeTicks"):ToInstance ToSubClass DisableOverride,object_syntax("TimeTicks"):ToInstance ToSubClass DisableOverride,read,object_identifier("1.3.6.1.2.1.1.3"):ToInstance ToSubClass DisableOverride,description("The time (in hundredths of a second) since the network management portion of the agent was last re-initialized."):ToInstance ToSubClass DisableOverride] uint32 TimeStamp;
[textual_convention("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, encoding("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, object_syntax("OBJECTIDENTIFIER"):ToInstance ToSubClass DisableOverride, read, object_identifier("1.3.6.1.6.3.1.1.4.1"):ToInstance ToSubClass DisableOverride,description("The authoratative identification of this notification."):ToInstance ToSubClass DisableOverride] string Identification;
[read, description("The network address of the entity that created this notification."):ToInstance ToSubClass DisableOverride] string AgentAddress;
[read, description("The network address of the entity that sent this notification. This may be a proxy for the original entity."):ToInstance ToSubClass DisableOverride] string AgentTransportAddress;
[read, description("The transport protocol used by the sending entity."):ToInstance ToSubClass DisableOverride] string AgentTransportProtocol;
[read, description("The security context used to send this notification."):ToInstance ToSubClass DisableOverride] string Community;
};

class NotificationMapper
{
[read, key] string SnmpTrapOID;
[read] string EventClassName;
};

class ExtendedNotificationMapper
{
[read, key] string SnmpTrapOID;
[read] string EventClassName;
};

[Association]
class ModToNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[Association]
class ModToExtNotificationClassAssociator
{
[read, key] string AssocName;
[read] object ref SmirClass;
[read] object ref SmirModule;
};

[dynamic, provider("MS_SNMP_ENCAPSULATED_EVENT_PROVIDER")]
class SnmpV2Notification : SnmpNotification
{
[read, Description("The variable binding order from the SNMP notification has been preserved with the exception of the first two variable bindings, TimeStamp and SnmpTrapOID, which have been removed and are separate properties	of this class.")]
SnmpVarBind VarBindList[];
};

[dynamic, provider("MS_SNMP_ENCAPSULATED_EVENT_PROVIDER")]
class SnmpV1Notification : SnmpNotification
{
[read, Description("The variable binding order from the SNMP notification has been preserved with the exception of the first two variable bindings, TimeStamp and SnmpTrapOID, which have been removed and are separate properties of this class.")]
SnmpVarBind VarBindList[];
};

[dynamic, provider("MS_SNMP_ENCAPSULATED_EVENT_PROVIDER")]
class SnmpColdStartNotification : SnmpNotification
{
};

instance of NotificationMapper
{
SnmpTrapOID = "1.3.6.1.6.3.1.1.5.1";
EventClassName = "SnmpColdStartNotification";
};

[dynamic, provider("MS_SNMP_ENCAPSULATED_EVENT_PROVIDER")]
class SnmpWarmStartNotification : SnmpNotification
{
};

instance of NotificationMapper
{
SnmpTrapOID = "1.3.6.1.6.3.1.1.5.2";
EventClassName = "SnmpWarmStartNotification";
};

[dynamic, provider("MS_SNMP_ENCAPSULATED_EVENT_PROVIDER")]
class SnmpLinkDownNotification : SnmpNotification
{
[object_identifier("1.3.6.1.2.1.2.2.1.1"),
textual_convention("INTEGER"), encoding("INTEGER"), read,
Description("A unique value for each interface.  Its value ranges between 1 and the value of ifNumber. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization."),
VarBindIndex(3)]
sint32	ifIndex;
[object_identifier("1.3.6.1.2.1.2.2.1.7"), textual_convention("EnumeratedInteger"),
read, encoding("INTEGER"), enumeration("up(1),down(2),testing(3)"),
Description("The desired state of the interface. The testing(3) state indicates that no operational packets can be passed."),
VarBindIndex(4)]
string	ifAdminStatus;
[object_identifier("1.3.6.1.2.1.2.2.1.8"), textual_convention("EnumeratedInteger"),
read, encoding("INTEGER"), enumeration("up(1),down(2),testing(3)"),
Description("The current operational state of the interface. The testing(3) state indicates that no operational packets can be passed."),
VarBindIndex(5)]
string	ifOperStatus;
};

instance of NotificationMapper
{
SnmpTrapOID = "1.3.6.1.6.3.1.1.5.3";
EventClassName = "SnmpLinkDownNotification";
};

[dynamic, provider("MS_SNMP_ENCAPSULATED_EVENT_PROVIDER")]
class SnmpLinkUpNotification : SnmpNotification
{
[object_identifier("1.3.6.1.2.1.2.2.1.1"),
textual_convention("INTEGER"), encoding("INTEGER"), read,
Description("A unique value for each interface.  Its value ranges between 1 and the value of ifNumber. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization."),
VarBindIndex(3)]
sint32	ifIndex;
[object_identifier("1.3.6.1.2.1.2.2.1.7"), textual_convention("EnumeratedInteger"),
read, encoding("INTEGER"), enumeration("up(1),down(2),testing(3)"),
Description("The desired state of the interface. The testing(3) state indicates that no operational packets can be passed."),
VarBindIndex(4)]
string	ifAdminStatus;
[object_identifier("1.3.6.1.2.1.2.2.1.8"), textual_convention("EnumeratedInteger"),
read, encoding("INTEGER"), enumeration("up(1),down(2),testing(3)"),
Description("The current operational state of the interface. The testing(3) state indicates that no operational packets can be passed."),
VarBindIndex(5)]
string	ifOperStatus;
};

instance of NotificationMapper
{
SnmpTrapOID = "1.3.6.1.6.3.1.1.5.4";
EventClassName = "SnmpLinkUpNotification";
};

[dynamic, provider("MS_SNMP_ENCAPSULATED_EVENT_PROVIDER")]
class SnmpAuthenticationFailureNotification : SnmpNotification
{
};

instance of NotificationMapper
{
SnmpTrapOID = "1.3.6.1.6.3.1.1.5.5";
EventClassName = "SnmpAuthenticationFailureNotification";
};

[dynamic, provider("MS_SNMP_ENCAPSULATED_EVENT_PROVIDER")]
class SnmpEGPNeighborLossNotification : SnmpNotification
{
[textual_convention("IpAddress"), encoding("IpAddress"), object_syntax("IpAddress"),
object_identifier("1.3.6.1.2.1.8.5.1.2"), read,
description("The IP address of this entry's EGP neighbor."),
status("mandatory"),
VarBindIndex(3)]
string	egpNeighAddr;
};

instance of NotificationMapper
{
SnmpTrapOID = "1.3.6.1.6.3.1.1.5.6";
EventClassName = "SnmpEGPNeighborLossNotification";
};

[dynamic, provider("MS_SNMP_REFERENT_EVENT_PROVIDER")]	
class SnmpV2ExtendedNotification : SnmpExtendedNotification
{
[read, Description("The variable binding order from the SNMP notification has been preserved with the exception of the first two variable bindings, TimeStamp and SnmpTrapOID, which have been removed and are separate properties	of this class.")]
SnmpVarBind VarBindList[];
};

[dynamic, provider("MS_SNMP_REFERENT_EVENT_PROVIDER")]
class SnmpV1ExtendedNotification : SnmpExtendedNotification
{
[read, Description("The variable binding order from the SNMP notification has been preserved with the exception of the first two variable bindings, TimeStamp and SnmpTrapOID, which have been removed and are separate properties of this class.")]
SnmpVarBind VarBindList[];
};

[dynamic, provider("MS_SNMP_REFERENT_EVENT_PROVIDER")]
class SnmpColdStartExtendedNotification : SnmpExtendedNotification
{
};

instance of ExtendedNotificationMapper
{
SnmpTrapOID = "1.3.6.1.6.3.1.1.5.1";
EventClassName = "SnmpColdStartExtendedNotification";
};

[dynamic, provider("MS_SNMP_REFERENT_EVENT_PROVIDER")]
class SnmpWarmStartExtendedNotification : SnmpExtendedNotification
{
};

instance of ExtendedNotificationMapper
{
SnmpTrapOID = "1.3.6.1.6.3.1.1.5.2";
EventClassName = "SnmpWarmStartExtendedNotification";
};

[dynamic, provider("MS_SNMP_REFERENT_EVENT_PROVIDER")]
class SnmpLinkDownExtendedNotification : SnmpExtendedNotification
{
[Description("A unique value for each interface.  Its value ranges between 1 and the value of ifNumber. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization."),
read, VarBindIndex(3)]
SNMP_RFC1213_MIB_ifTable ifIndex;
[Description("The desired state of the interface. The testing(3) state indicates that no operational packets can be passed."),
read, VarBindIndex(4)]
SNMP_RFC1213_MIB_ifTable ifAdminStatus;
[Description("The current operational state of the interface. The testing(3) state indicates that no operational packets can be passed."),
read, VarBindIndex(5)]
SNMP_RFC1213_MIB_ifTable ifOperStatus;
};

instance of ExtendedNotificationMapper
{
SnmpTrapOID = "1.3.6.1.6.3.1.1.5.3";
EventClassName = "SnmpLinkDownExtendedNotification";
};

[dynamic, provider("MS_SNMP_REFERENT_EVENT_PROVIDER")]
class SnmpLinkUpExtendedNotification : SnmpExtendedNotification
{
[Description("A unique value for each interface.  Its value ranges between 1 and the value of ifNumber. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization."),
read, VarBindIndex(3)]
SNMP_RFC1213_MIB_ifTable ifIndex;
[Description("The desired state of the interface. The testing(3) state indicates that no operational packets can be passed."),
read, VarBindIndex(4)]
SNMP_RFC1213_MIB_ifTable ifAdminStatus;
[Description("The current operational state of the interface. The testing(3) state indicates that no operational packets can be passed."),
read, VarBindIndex(5)]
SNMP_RFC1213_MIB_ifTable ifOperStatus;
};

instance of ExtendedNotificationMapper
{
SnmpTrapOID = "1.3.6.1.6.3.1.1.5.4";
EventClassName = "SnmpLinkUpExtendedNotification";
};

[dynamic, provider("MS_SNMP_REFERENT_EVENT_PROVIDER")]
class SnmpAuthenticationFailureExtendedNotification : SnmpExtendedNotification
{
};

instance of ExtendedNotificationMapper
{
SnmpTrapOID = "1.3.6.1.6.3.1.1.5.5";
EventClassName = "SnmpAuthenticationFailureExtendedNotification";
};

[dynamic, provider("MS_SNMP_REFERENT_EVENT_PROVIDER")]
class SnmpEGPNeighborLossExtendedNotification : SnmpExtendedNotification
{
[Description("The IP address of this entry's EGP neighbor."),
read, VarBindIndex(3)]
SNMP_RFC1213_MIB_egpNeighTable egpNeighAddr;
};

instance of ExtendedNotificationMapper
{
SnmpTrapOID = "1.3.6.1.6.3.1.1.5.6";
EventClassName = "SnmpEGPNeighborLossExtendedNotification";
};
